{
  "swagger": "2.0",
  "info": {
    "version": "3.7.1"
  },
  "basePath": "/api",
  "tags": [
    {
      "name": "Extension Services"
    }, {
      "name": "Connector Services"
    }, {
      "name": "Channel Statistics"
    }, {
      "name": "Code Templates"
    }, {
      "name": "Channel Groups"
    }, {
      "name": "Database Tasks"
    }, {
      "name": "Server Configuration"
    }, {
      "name": "Users"
    }, {
      "name": "Extensions"
    }, {
      "name": "Events"
    }, {
      "name": "Channel Status Operations"
    }, {
      "name": "Usage Data"
    }, {
      "name": "Alerts"
    }, {
      "name": "Channels"
    }, {
      "name": "System Information and Statistics"
    }, {
      "name": "Channel Deployment Operations"
    }, {
      "name": "Messages"
    }
  ],
  "schemes": ["https"],
  "paths": {
    "/alerts": {
      "get": {
        "tags": ["Alerts"],
        "summary": "Retrieves multiple alerts by ID, or all alerts if not specified.",
        "description": "",
        "operationId": "getAlerts",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "alertId",
            "in": "query",
            "description": "The ID of the alert(s). If absent, all alerts will be returned.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlertModel"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Alerts"],
        "summary": "Creates a new alert.",
        "description": "",
        "operationId": "createAlert",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The alert to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AlertModel"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/alerts/_getAlerts": {
      "post": {
        "tags": ["Alerts"],
        "summary": "Retrieves multiple alerts by ID, or all alerts if not specified. This is a POST request alternative to GET /alerts that may be used when there are too many alert IDs to include in the query parameters.",
        "description": "",
        "operationId": "getAlertsPost",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ID of the alert(s). If absent, all alerts will be returned.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlertModel"
              }
            }
          }
        }
      }
    },
    "/alerts/_getInfo": {
      "post": {
        "tags": ["Alerts"],
        "summary": "Returns an AlertInfo object containing alert protocol options and any updated channel summaries.",
        "description": "",
        "operationId": "getAlertInfo",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "A map of ChannelHeader objects telling the server the state of the client-side channel cache.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ChannelHeader"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AlertInfo"
            }
          }
        }
      }
    },
    "/alerts/options": {
      "get": {
        "tags": ["Alerts"],
        "summary": "Returns all alert protocol options.",
        "description": "",
        "operationId": "getAlertProtocolOptions",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/statuses": {
      "get": {
        "tags": ["Alerts"],
        "summary": "Returns all alert dashboard statuses.",
        "description": "",
        "operationId": "getAlertStatusList",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlertStatus"
              }
            }
          }
        }
      }
    },
    "/alerts/{alertId}": {
      "get": {
        "tags": ["Alerts"],
        "summary": "Retrieves an alert by ID.",
        "description": "",
        "operationId": "getAlert",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "The ID of the alert.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AlertModel"
            }
          }
        }
      },
      "put": {
        "tags": ["Alerts"],
        "summary": "Updates the specified alert.",
        "description": "",
        "operationId": "updateAlert",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "The ID of the alert.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The alert to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AlertModel"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["Alerts"],
        "summary": "Removes the specified alert.",
        "description": "",
        "operationId": "removeAlert",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "The ID of the alert.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/alerts/{alertId}/_disable": {
      "post": {
        "tags": ["Alerts"],
        "summary": "Disables the specified alert.",
        "description": "",
        "operationId": "disableAlert",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "The ID of the alert.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/alerts/{alertId}/_enable": {
      "post": {
        "tags": ["Alerts"],
        "summary": "Enables the specified alert.",
        "description": "",
        "operationId": "enableAlert",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "The ID of the alert.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/alerts/{alertId}/_getInfo": {
      "post": {
        "tags": ["Alerts"],
        "summary": "Returns an AlertInfo object containing the alert model, alert protocol options, and any updated channel summaries.",
        "description": "",
        "operationId": "getAlertInfo",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "description": "The ID of the alert.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "A map of ChannelHeader objects telling the server the state of the client-side channel cache.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ChannelHeader"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AlertInfo"
            }
          }
        }
      }
    },
    "/channelgroups": {
      "get": {
        "tags": ["Channel Groups"],
        "summary": "Retrieve a list of all channel groups, or multiple channel groups by ID.",
        "description": "",
        "operationId": "getChannelGroups",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelGroupId",
            "in": "query",
            "description": "The IDs of the channel groups to retrieve. If absent, all groups will be retrieved.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelGroup"
              }
            }
          }
        }
      }
    },
    "/channelgroups/_bulkUpdate": {
      "post": {
        "tags": ["Channel Groups"],
        "summary": "Updates all channel groups in one request.",
        "description": "",
        "operationId": "updateChannelGroups",
        "consumes": ["multipart/form-data"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelGroups",
            "in": "formData",
            "description": "The channel group object to update or create.",
            "required": false,
            "type": "array",
            "items": {
              "$ref": "#/definitions/ChannelGroup"
            },
            "collectionFormat": "multi"
          }, {
            "name": "removedChannelGroupIds",
            "in": "formData",
            "description": "All channel group IDs known to be removed.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "override",
            "in": "query",
            "description": "If true, the channel groups will be updated even if different revisions exist on the server.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/channelgroups/_getChannelGroups": {
      "post": {
        "tags": ["Channel Groups"],
        "summary": "Retrieve a list of all channel groups, or multiple channel groups by ID. This is a POST request alternative to GET /channelgroups that may be used when there are too many channel group IDs to include in the query parameters.",
        "description": "",
        "operationId": "getChannelGroupsPost",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The IDs of the channel groups to retrieve. If absent, all groups will be retrieved.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelGroup"
              }
            }
          }
        }
      }
    },
    "/channels": {
      "get": {
        "tags": ["Channels"],
        "summary": "Retrieve a list of all channels, or multiple channels by ID.",
        "description": "",
        "operationId": "getChannels",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "The IDs of the channels to retrieve. If absent, all channels will be retrieved.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "pollingOnly",
            "in": "query",
            "description": "If true, only channels with polling source connectors will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Channel"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Channels"],
        "summary": "Creates a new channel.",
        "description": "",
        "operationId": "createChannel",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The Channel object to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Channel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      },
      "delete": {
        "tags": ["Channels"],
        "summary": "Removes the channels with the specified IDs.",
        "description": "",
        "operationId": "removeChannels",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "The IDs of the channels to remove.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/_clearAllStatistics": {
      "post": {
        "tags": ["Channel Statistics"],
        "summary": "Clears all statistics (including lifetime) for all channels/connectors.",
        "description": "",
        "operationId": "clearAllStatistics",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/_clearStatistics": {
      "post": {
        "tags": ["Channel Statistics"],
        "summary": "Clears the statistics for the given channels and/or connectors.",
        "description": "",
        "operationId": "clearStatistics",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Channel IDs mapped to lists of metaDataIds (connectors). If the metaDataId list is null, then all statistics for the channel will be cleared.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }, {
            "name": "received",
            "in": "query",
            "description": "If true, received stats will be cleared.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "filtered",
            "in": "query",
            "description": "If true, filtered stats will be cleared.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "sent",
            "in": "query",
            "description": "If true, sent stats will be cleared.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "error",
            "in": "query",
            "description": "If true, error stats will be cleared.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/_deploy": {
      "post": {
        "tags": ["Channel Deployment Operations"],
        "summary": "Deploys (or redeploys) selected channels.",
        "description": "",
        "operationId": "deployChannels",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ID of the channel(s) to deploy. If absent, all channels will be deployed.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }, {
            "name": "returnErrors",
            "in": "query",
            "description": "If true, an error response code and the exception will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/_getChannels": {
      "post": {
        "tags": ["Channels"],
        "summary": "Retrieve a list of all channels, or multiple channels by ID. This is a POST request alternative to GET /channels that may be used when there are too many channel IDs to include in the query parameters.",
        "description": "",
        "operationId": "getChannelsPost",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The IDs of the channels to retrieve. If absent, all channels will be retrieved.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }, {
            "name": "pollingOnly",
            "in": "query",
            "description": "If true, only channels with polling source connectors will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Channel"
              }
            }
          }
        }
      }
    },
    "/channels/_getSummary": {
      "post": {
        "tags": ["Channels"],
        "summary": "Returns a list of channel summaries, indicating to a client which channels have changed (been updated, deleted, undeployed, etc.). If a channel was modified, the entire Channel object will be returned.",
        "description": "",
        "operationId": "getChannelSummary",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "A map of ChannelHeader objects telling the server the state of the client-side channel cache.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ChannelHeader"
              }
            }
          }, {
            "name": "ignoreNewChannels",
            "in": "query",
            "description": "If true, summaries will only be returned for channels in the map's entry set.",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelSummary"
              }
            }
          }
        }
      }
    },
    "/channels/_halt": {
      "post": {
        "tags": ["Channel Status Operations"],
        "summary": "Halts the channels with the specified IDs.",
        "description": "",
        "operationId": "haltChannels",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "formData",
            "description": "The channel IDs to halt.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "returnErrors",
            "in": "query",
            "description": "If true, an error response code and the exception will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/_pause": {
      "post": {
        "tags": ["Channel Status Operations"],
        "summary": "Pauses the channels with the specified IDs.",
        "description": "",
        "operationId": "pauseChannels",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "formData",
            "description": "The channel IDs to pause.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "returnErrors",
            "in": "query",
            "description": "If true, an error response code and the exception will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/_redeployAll": {
      "post": {
        "tags": ["Channel Deployment Operations"],
        "summary": "Redeploys all channels.",
        "description": "",
        "operationId": "redeployAllChannels",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "returnErrors",
            "in": "query",
            "description": "If true, an error response code and the exception will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/_removeAllMessages": {
      "delete": {
        "tags": ["Messages"],
        "summary": "Removes all messages for multiple specified channels.",
        "description": "",
        "operationId": "removeAllMessages",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "The IDs of the channels.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "restartRunningChannels",
            "in": "query",
            "description": "If true, currently running channels will be stopped and restarted as part of the remove process. Otherwise, currently running channels will not be included.",
            "required": false,
            "type": "boolean",
            "default": false
          }, {
            "name": "clearStatistics",
            "in": "query",
            "description": "If true, message statistics will also be cleared.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/_removeAllMessagesPost": {
      "post": {
        "tags": ["Messages"],
        "summary": "Removes all messages for multiple specified channels. This is a POST request alternative to DELETE /_removeAllMessages that may be used when there are too many channel IDs to include in the query parameters.",
        "description": "",
        "operationId": "removeAllMessagesPost",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The IDs of the channels.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }, {
            "name": "restartRunningChannels",
            "in": "query",
            "description": "If true, currently running channels will be stopped and restarted as part of the remove process. Otherwise, currently running channels will not be included.",
            "required": false,
            "type": "boolean",
            "default": false
          }, {
            "name": "clearStatistics",
            "in": "query",
            "description": "If true, message statistics will also be cleared.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/_removeChannels": {
      "post": {
        "tags": ["Channels"],
        "summary": "Removes the channels with the specified IDs. This is a POST request alternative to DELETE /channels that may be used when there are too many channel IDs to include in the query parameters.",
        "description": "",
        "operationId": "removeChannelsPost",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The IDs of the channels to remove.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/_resume": {
      "post": {
        "tags": ["Channel Status Operations"],
        "summary": "Resume the channels with the specified IDs.",
        "description": "",
        "operationId": "resumeChannels",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "formData",
            "description": "The channel IDs to resume.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "returnErrors",
            "in": "query",
            "description": "If true, an error response code and the exception will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/_setEnabled": {
      "post": {
        "tags": ["Channels"],
        "summary": "Enables/disables the specified channels.",
        "description": "",
        "operationId": "setChannelEnabled",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "formData",
            "description": "The IDs of the channels to enable/disable. If absent, all channels will be enabled/disabled.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "enabled",
            "in": "formData",
            "description": "Indicates whether the channels should be enabled or disabled.",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/_setInitialState": {
      "post": {
        "tags": ["Channels"],
        "summary": "Sets the initial state for the specified channels.",
        "description": "",
        "operationId": "setChannelInitialState",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "formData",
            "description": "The IDs of the channels to modify initial states on. If absent, the initial state will be set on all channels.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "initialState",
            "in": "formData",
            "description": "The initial state of the channel.",
            "required": true,
            "type": "string",
            "enum": ["STARTED", "PAUSED", "STOPPED"]
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/_start": {
      "post": {
        "tags": ["Channel Status Operations"],
        "summary": "Starts the channels with the specified IDs.",
        "description": "",
        "operationId": "startChannels",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "formData",
            "description": "The channel IDs to start.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "returnErrors",
            "in": "query",
            "description": "If true, an error response code and the exception will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/_startConnectors": {
      "post": {
        "tags": ["Channel Status Operations"],
        "summary": "Starts the connectors with the specified channel and metadata IDs.",
        "description": "",
        "operationId": "startConnectors",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "A map of channel and metadata IDs to start connectors for.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }, {
            "name": "returnErrors",
            "in": "query",
            "description": "If true, an error response code and the exception will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/_stop": {
      "post": {
        "tags": ["Channel Status Operations"],
        "summary": "Stops the channels with the specified IDs.",
        "description": "",
        "operationId": "stopChannels",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "formData",
            "description": "The channel IDs to stop.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "returnErrors",
            "in": "query",
            "description": "If true, an error response code and the exception will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/_stopConnectors": {
      "post": {
        "tags": ["Channel Status Operations"],
        "summary": "Stops the connectors with the specified channel and metadata IDs.",
        "description": "",
        "operationId": "stopConnectors",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "A map of channel and metadata IDs to stop connectors for.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }, {
            "name": "returnErrors",
            "in": "query",
            "description": "If true, an error response code and the exception will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/_undeploy": {
      "post": {
        "tags": ["Channel Deployment Operations"],
        "summary": "Undeploys selected channels.",
        "description": "",
        "operationId": "undeployChannels",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ID of the channel(s) to undeploy. If absent, all channels will be undeployed.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }, {
            "name": "returnErrors",
            "in": "query",
            "description": "If true, an error response code and the exception will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/idsAndNames": {
      "get": {
        "tags": ["Channels"],
        "summary": "Returns a map of all channel IDs and names.",
        "description": "",
        "operationId": "getChannelIdsAndNames",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/channels/statistics": {
      "get": {
        "tags": ["Channel Statistics"],
        "summary": "Returns the Statistics for all channels.",
        "description": "",
        "operationId": "getStatistics",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "The IDs of the channels to retrieve. If absent, all channels will be retrieved.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "includeUndeployed",
            "in": "query",
            "description": "If true, statistics for undeployed channels will also be included.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "includeMetadataId",
            "in": "query",
            "description": "The ids of connectors to include. Cannot include and exclude connectors.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }, {
            "name": "excludeMetadataId",
            "in": "query",
            "description": "The ids of connectors to exclude. Cannot include and exclude connectors.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }, {
            "name": "aggregateStats",
            "in": "query",
            "description": "If true, statistics will be aggregated into one result",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelStatistics"
              }
            }
          }
        }
      }
    },
    "/channels/statistics/_getStatistics": {
      "post": {
        "tags": ["Channel Statistics"],
        "summary": "Returns the Statistics for all channels. This is a POST request alternative to GET /statistics that may be used when there are too many channel IDs to include in the query parameters.",
        "description": "",
        "operationId": "getStatisticsPost",
        "consumes": ["multipart/form-data"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelIds",
            "in": "formData",
            "description": "The IDs of the channels to retrieve. If absent, all channels will be retrieved.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "includeUndeployed",
            "in": "formData",
            "description": "If true, statistics for undeployed channels will also be included.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "includeMetadataIds",
            "in": "formData",
            "description": "The ids of connectors to include. Cannot include and exclude connectors.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }, {
            "name": "excludeMetadataIds",
            "in": "formData",
            "description": "The ids of connectors to exclude. Cannot include and exclude connectors.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }, {
            "name": "aggregateStats",
            "in": "formData",
            "description": "If true, statistics will be aggregated into one result",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelStatistics"
              }
            }
          }
        }
      }
    },
    "/channels/statuses": {
      "get": {
        "tags": ["Channel Status Operations"],
        "summary": "Returns all channel dashboard statuses, or multiple statuses by channel ID.",
        "description": "",
        "operationId": "getChannelStatusList",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "The channel IDs to return dashboard statuses for. If absent, all statuses will be returned.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "filter",
            "in": "query",
            "description": "The filter string to limit dashboard statuses with.",
            "required": false,
            "type": "string"
          }, {
            "name": "includeUndeployed",
            "in": "query",
            "description": "If true, statuses for undeployed channels will also be included.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DashboardStatus"
              }
            }
          }
        }
      }
    },
    "/channels/statuses/_getChannelStatusList": {
      "post": {
        "tags": ["Channel Status Operations"],
        "summary": "Returns all channel dashboard statuses, or multiple statuses by channel ID. This is a POST request alternative to GET /statuses that may be used when there are too many channel IDs to include in the query parameters.",
        "description": "",
        "operationId": "getChannelStatusListPost",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The channel IDs to return dashboard statuses for. If absent, all statuses will be returned.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }, {
            "name": "filter",
            "in": "query",
            "description": "The filter string to limit dashboard statuses with.",
            "required": false,
            "type": "string"
          }, {
            "name": "includeUndeployed",
            "in": "query",
            "description": "If true, statuses for undeployed channels will also be included.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DashboardStatus"
              }
            }
          }
        }
      }
    },
    "/channels/statuses/initial": {
      "get": {
        "tags": ["Channel Status Operations"],
        "summary": "Returns a DashboardChannelInfo object containing a partial channel status list and a set of remaining channel IDs.",
        "description": "",
        "operationId": "getDashboardChannelInfo",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "fetchSize",
            "in": "query",
            "description": "Specifies the maximum number of statuses to return.",
            "required": true,
            "type": "integer",
            "default": 100,
            "format": "int32"
          }, {
            "name": "filter",
            "in": "query",
            "description": "The filter string to limit dashboard statuses with.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DashboardChannelInfo"
            }
          }
        }
      }
    },
    "/channels/{channelId}": {
      "get": {
        "tags": ["Channels"],
        "summary": "Retrieve a single channel by ID.",
        "description": "",
        "operationId": "getChannel",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Channel"
            }
          }
        }
      },
      "put": {
        "tags": ["Channels"],
        "summary": "Updates the specified channel.",
        "description": "",
        "operationId": "updateChannel",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel to update.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The Channel object to update with.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Channel"
            }
          }, {
            "name": "override",
            "in": "query",
            "description": "If true, the channel will be updated even if a different revision exists on the server.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      },
      "delete": {
        "tags": ["Channels"],
        "summary": "Removes the channel with the specified ID.",
        "description": "",
        "operationId": "removeChannel",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel to remove.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/_deploy": {
      "post": {
        "tags": ["Channel Deployment Operations"],
        "summary": "Deploys (or redeploys) a single channel.",
        "description": "",
        "operationId": "deployChannel",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel to deploy.",
            "required": true,
            "type": "string"
          }, {
            "name": "returnErrors",
            "in": "query",
            "description": "If true, an error response code and the exception will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/_halt": {
      "post": {
        "tags": ["Channel Status Operations"],
        "summary": "Halts the channel with the specified ID.",
        "description": "",
        "operationId": "haltChannel",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The channel ID to halt.",
            "required": true,
            "type": "string"
          }, {
            "name": "returnErrors",
            "in": "query",
            "description": "If true, an error response code and the exception will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/_pause": {
      "post": {
        "tags": ["Channel Status Operations"],
        "summary": "Pauses the channel with the specified ID.",
        "description": "",
        "operationId": "pauseChannel",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The channel ID to pause.",
            "required": true,
            "type": "string"
          }, {
            "name": "returnErrors",
            "in": "query",
            "description": "If true, an error response code and the exception will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/_resume": {
      "post": {
        "tags": ["Channel Status Operations"],
        "summary": "Resumes the channel with the specified ID.",
        "description": "",
        "operationId": "resumeChannel",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The channel ID to resume.",
            "required": true,
            "type": "string"
          }, {
            "name": "returnErrors",
            "in": "query",
            "description": "If true, an error response code and the exception will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/_start": {
      "post": {
        "tags": ["Channel Status Operations"],
        "summary": "Starts the channel with the specified ID.",
        "description": "",
        "operationId": "startChannel",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The channel ID to start.",
            "required": true,
            "type": "string"
          }, {
            "name": "returnErrors",
            "in": "query",
            "description": "If true, an error response code and the exception will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/_stop": {
      "post": {
        "tags": ["Channel Status Operations"],
        "summary": "Stops the channel with the specified ID.",
        "description": "",
        "operationId": "stopChannel",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The channel ID to stop.",
            "required": true,
            "type": "string"
          }, {
            "name": "returnErrors",
            "in": "query",
            "description": "If true, an error response code and the exception will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/_undeploy": {
      "post": {
        "tags": ["Channel Deployment Operations"],
        "summary": "Undeploys a single channel.",
        "description": "",
        "operationId": "undeployChannel",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel to undeploy.",
            "required": true,
            "type": "string"
          }, {
            "name": "returnErrors",
            "in": "query",
            "description": "If true, an error response code and the exception will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/connector/{metaDataId}/_start": {
      "post": {
        "tags": ["Channel Status Operations"],
        "summary": "Starts the connector with the specified channel and metadata ID.",
        "description": "",
        "operationId": "startConnector",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The channel ID to start a connector for.",
            "required": true,
            "type": "string"
          }, {
            "name": "metaDataId",
            "in": "path",
            "description": "The connector metadata ID to start.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "returnErrors",
            "in": "query",
            "description": "If true, an error response code and the exception will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/connector/{metaDataId}/_stop": {
      "post": {
        "tags": ["Channel Status Operations"],
        "summary": "Stops the connector with the specified channel and metadata ID.",
        "description": "",
        "operationId": "stopConnector",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The channel ID to stop a connector for.",
            "required": true,
            "type": "string"
          }, {
            "name": "metaDataId",
            "in": "path",
            "description": "The connector metadata ID to stop.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "returnErrors",
            "in": "query",
            "description": "If true, an error response code and the exception will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/connectorNames": {
      "get": {
        "tags": ["Channels"],
        "summary": "Returns all connector names for a channel.",
        "description": "",
        "operationId": "getConnectorNames",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/channels/{channelId}/enabled/{enabled}": {
      "post": {
        "tags": ["Channels"],
        "summary": "Enables/disables the specified channel.",
        "description": "",
        "operationId": "setChannelEnabled",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "enabled",
            "in": "path",
            "description": "The enabled flag (true/false) to set.",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/initialState/{initialState}": {
      "post": {
        "tags": ["Channels"],
        "summary": "Sets the initial state for a single channel.",
        "description": "",
        "operationId": "setChannelInitialState",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "initialState",
            "in": "path",
            "description": "The initial state of the channel.",
            "required": true,
            "type": "string",
            "enum": ["STARTED", "PAUSED", "STOPPED"]
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/messages": {
      "get": {
        "tags": ["Messages"],
        "summary": "Search for messages by specific filter criteria.",
        "description": "",
        "operationId": "getMessages",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "minMessageId",
            "in": "query",
            "description": "The minimum message ID to query.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "maxMessageId",
            "in": "query",
            "description": "The maximum message ID to query.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "minOriginalId",
            "in": "query",
            "description": "The minimum original message ID to query. Messages that have been reprocessed will retain their original message ID.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "maxOriginalId",
            "in": "query",
            "description": "The maximum original message ID to query. Messages that have been reprocessed will retain their original message ID.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "minImportId",
            "in": "query",
            "description": "The minimum import message ID to query. Messages that have been imported will retain their original message ID under this value.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "maxImportId",
            "in": "query",
            "description": "The maximum import message ID to query. Messages that have been imported will retain their original message ID under this value.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "startDate",
            "in": "query",
            "description": "The earliest original received date to query by. Example: 1985-10-26T09:00:00.000-0700",
            "required": false,
            "type": "string",
            "format": "date-time"
          }, {
            "name": "endDate",
            "in": "query",
            "description": "The latest original received date to query by. Example: 2015-10-21T07:28:00.000-0700",
            "required": false,
            "type": "string",
            "format": "date-time"
          }, {
            "name": "textSearch",
            "in": "query",
            "description": "Searches all message content for this string. This process could take a long time depending on the amount of message content currently stored. Any message content that was encrypted by this channel will not be searchable.",
            "required": false,
            "type": "string"
          }, {
            "name": "textSearchRegex",
            "in": "query",
            "description": "If true, text search input will be considered a regular expression pattern to be matched. Only supported by PostgreSQL, MySQL and Oracle databases.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "status",
            "in": "query",
            "description": "Determines which message statuses to query by.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["RECEIVED", "FILTERED", "TRANSFORMED", "SENT", "QUEUED", "ERROR", "PENDING"]
            },
            "collectionFormat": "multi"
          }, {
            "name": "includedMetaDataId",
            "in": "query",
            "description": "If present, only connector metadata IDs in this list will be queried.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }, {
            "name": "excludedMetaDataId",
            "in": "query",
            "description": "If present, connector metadata IDs in this list will not be queried.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }, {
            "name": "serverId",
            "in": "query",
            "description": "The server ID associated with messages.",
            "required": false,
            "type": "string"
          }, {
            "name": "rawContentSearch",
            "in": "query",
            "description": "Searches the raw content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "processedRawContentSearch",
            "in": "query",
            "description": "Searches the processed raw content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "transformedContentSearch",
            "in": "query",
            "description": "Searches the transformed content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "encodedContentSearch",
            "in": "query",
            "description": "Searches the encoded content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "sentContentSearch",
            "in": "query",
            "description": "Searches the sent content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseContentSearch",
            "in": "query",
            "description": "Searches the response content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseTransformedContentSearch",
            "in": "query",
            "description": "Searches the response transformed content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "processedResponseContentSearch",
            "in": "query",
            "description": "Searches the processed response content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "connectorMapContentSearch",
            "in": "query",
            "description": "Searches the connector map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "channelMapContentSearch",
            "in": "query",
            "description": "Searches the channel map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "sourceMapContentSearch",
            "in": "query",
            "description": "Searches the source map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseMapContentSearch",
            "in": "query",
            "description": "Searches the response map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "processingErrorContentSearch",
            "in": "query",
            "description": "Searches the processing error content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "postprocessorErrorContentSearch",
            "in": "query",
            "description": "Searches the postprocessor error content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseErrorContentSearch",
            "in": "query",
            "description": "Searches the response error content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "metaDataSearch",
            "in": "query",
            "description": "Searches a custom metadata column. Value should be in the form: COLUMN_NAME &lt;operator&gt; value, where operator is one of the following: =, !=, <, <=, >, >=, CONTAINS, DOES NOT CONTAIN, STARTS WITH, DOES NOT START WITH, ENDS WITH, DOES NOT END WITH",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "metaDataCaseInsensitiveSearch",
            "in": "query",
            "description": "Searches a custom metadata column, ignoring case. Value should be in the form: COLUMN_NAME &lt;operator&gt; value.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "textSearchMetaDataColumn",
            "in": "query",
            "description": "When using a text search, these custom metadata columns will also be searched.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "minSendAttempts",
            "in": "query",
            "description": "The minimum number of send attempts for connector messages.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "maxSendAttempts",
            "in": "query",
            "description": "The maximum number of send attempts for connector messages.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "attachment",
            "in": "query",
            "description": "If true, only messages with attachments are included in the results.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "error",
            "in": "query",
            "description": "If true, only messages with errors are included in the results.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "includeContent",
            "in": "query",
            "description": "If true, message content will be returned with the results.",
            "required": false,
            "type": "boolean",
            "default": false
          }, {
            "name": "offset",
            "in": "query",
            "description": "Used for pagination, determines where to start in the search results.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }, {
            "name": "limit",
            "in": "query",
            "description": "Used for pagination, determines the maximum number of results to return.",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Message"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Messages"],
        "summary": "Processes a new message through a channel.",
        "description": "",
        "operationId": "processMessage",
        "consumes": ["text/plain"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The raw message data to process.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }, {
            "name": "destinationMetaDataId",
            "in": "query",
            "description": "Indicates which destinations to send the message to.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }, {
            "name": "sourceMapEntry",
            "in": "query",
            "description": "These entries will be injected into the source map for the message. Value should be in the format: key=value",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "overwrite",
            "in": "query",
            "description": "If true and a valid original message ID is given, this message will overwrite the existing one.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "imported",
            "in": "query",
            "description": "If true, marks this message as being imported. If the message is overwriting an existing one, then statistics will not be decremented.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "originalMessageId",
            "in": "query",
            "description": "The original message ID this message is associated with.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "delete": {
        "tags": ["Messages"],
        "summary": "Remove messages by specific filter criteria.",
        "description": "",
        "operationId": "removeMessages",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "minMessageId",
            "in": "query",
            "description": "The minimum message ID to query.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "maxMessageId",
            "in": "query",
            "description": "The maximum message ID to query.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "minOriginalId",
            "in": "query",
            "description": "The minimum original message ID to query. Messages that have been reprocessed will retain their original message ID.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "maxOriginalId",
            "in": "query",
            "description": "The maximum original message ID to query. Messages that have been reprocessed will retain their original message ID.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "minImportId",
            "in": "query",
            "description": "The minimum import message ID to query. Messages that have been imported will retain their original message ID under this value.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "maxImportId",
            "in": "query",
            "description": "The maximum import message ID to query. Messages that have been imported will retain their original message ID under this value.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "startDate",
            "in": "query",
            "description": "The earliest original received date to query by. Example: 1985-10-26T09:00:00.000-0700",
            "required": false,
            "type": "string",
            "format": "date-time"
          }, {
            "name": "endDate",
            "in": "query",
            "description": "The latest original received date to query by. Example: 2015-10-21T07:28:00.000-0700",
            "required": false,
            "type": "string",
            "format": "date-time"
          }, {
            "name": "textSearch",
            "in": "query",
            "description": "Searches all message content for this string. This process could take a long time depending on the amount of message content currently stored. Any message content that was encrypted by this channel will not be searchable.",
            "required": false,
            "type": "string"
          }, {
            "name": "textSearchRegex",
            "in": "query",
            "description": "If true, text search input will be considered a regular expression pattern to be matched. Only supported by PostgreSQL, MySQL and Oracle databases.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "status",
            "in": "query",
            "description": "Determines which message statuses to query by.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["RECEIVED", "FILTERED", "TRANSFORMED", "SENT", "QUEUED", "ERROR", "PENDING"]
            },
            "collectionFormat": "multi"
          }, {
            "name": "includedMetaDataId",
            "in": "query",
            "description": "If present, only connector metadata IDs in this list will be queried.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }, {
            "name": "excludedMetaDataId",
            "in": "query",
            "description": "If present, connector metadata IDs in this list will not be queried.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }, {
            "name": "serverId",
            "in": "query",
            "description": "The server ID associated with messages.",
            "required": false,
            "type": "string"
          }, {
            "name": "rawContentSearch",
            "in": "query",
            "description": "Searches the raw content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "processedRawContentSearch",
            "in": "query",
            "description": "Searches the processed raw content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "transformedContentSearch",
            "in": "query",
            "description": "Searches the transformed content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "encodedContentSearch",
            "in": "query",
            "description": "Searches the encoded content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "sentContentSearch",
            "in": "query",
            "description": "Searches the sent content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseContentSearch",
            "in": "query",
            "description": "Searches the response content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseTransformedContentSearch",
            "in": "query",
            "description": "Searches the response transformed content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "processedResponseContentSearch",
            "in": "query",
            "description": "Searches the processed response content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "connectorMapContentSearch",
            "in": "query",
            "description": "Searches the connector map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "channelMapContentSearch",
            "in": "query",
            "description": "Searches the channel map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "sourceMapContentSearch",
            "in": "query",
            "description": "Searches the source map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseMapContentSearch",
            "in": "query",
            "description": "Searches the response map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "processingErrorContentSearch",
            "in": "query",
            "description": "Searches the processing error content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "postprocessorErrorContentSearch",
            "in": "query",
            "description": "Searches the postprocessor error content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseErrorContentSearch",
            "in": "query",
            "description": "Searches the response error content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "metaDataSearch",
            "in": "query",
            "description": "Searches a custom metadata column. Value should be in the form: COLUMN_NAME &lt;operator&gt; value, where operator is one of the following: =, !=, <, <=, >, >=, CONTAINS, DOES NOT CONTAIN, STARTS WITH, DOES NOT START WITH, ENDS WITH, DOES NOT END WITH",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "metaDataCaseInsensitiveSearch",
            "in": "query",
            "description": "Searches a custom metadata column, ignoring case. Value should be in the form: COLUMN_NAME &lt;operator&gt; value.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "textSearchMetaDataColumn",
            "in": "query",
            "description": "When using a text search, these custom metadata columns will also be searched.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "minSendAttempts",
            "in": "query",
            "description": "The minimum number of send attempts for connector messages.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "maxSendAttempts",
            "in": "query",
            "description": "The maximum number of send attempts for connector messages.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "attachment",
            "in": "query",
            "description": "If true, only messages with attachments are included in the results.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "error",
            "in": "query",
            "description": "If true, only messages with errors are included in the results.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/messages/_export": {
      "post": {
        "tags": ["Messages"],
        "summary": "Exports messages into a specific directory path accessible by the server.",
        "description": "",
        "operationId": "exportMessagesServer",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "minMessageId",
            "in": "query",
            "description": "The minimum message ID to query.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "maxMessageId",
            "in": "query",
            "description": "The maximum message ID to query.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "minOriginalId",
            "in": "query",
            "description": "The minimum original message ID to query. Messages that have been reprocessed will retain their original message ID.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "maxOriginalId",
            "in": "query",
            "description": "The maximum original message ID to query. Messages that have been reprocessed will retain their original message ID.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "minImportId",
            "in": "query",
            "description": "The minimum import message ID to query. Messages that have been imported will retain their original message ID under this value.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "maxImportId",
            "in": "query",
            "description": "The maximum import message ID to query. Messages that have been imported will retain their original message ID under this value.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "startDate",
            "in": "query",
            "description": "The earliest original received date to query by. Example: 1985-10-26T09:00:00.000-0700",
            "required": false,
            "type": "string",
            "format": "date-time"
          }, {
            "name": "endDate",
            "in": "query",
            "description": "The latest original received date to query by. Example: 2015-10-21T07:28:00.000-0700",
            "required": false,
            "type": "string",
            "format": "date-time"
          }, {
            "name": "textSearch",
            "in": "query",
            "description": "Searches all message content for this string. This process could take a long time depending on the amount of message content currently stored. Any message content that was encrypted by this channel will not be searchable.",
            "required": false,
            "type": "string"
          }, {
            "name": "textSearchRegex",
            "in": "query",
            "description": "If true, text search input will be considered a regular expression pattern to be matched. Only supported by PostgreSQL, MySQL and Oracle databases.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "status",
            "in": "query",
            "description": "Determines which message statuses to query by.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["RECEIVED", "FILTERED", "TRANSFORMED", "SENT", "QUEUED", "ERROR", "PENDING"]
            },
            "collectionFormat": "multi"
          }, {
            "name": "includedMetaDataId",
            "in": "query",
            "description": "If present, only connector metadata IDs in this list will be queried.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }, {
            "name": "excludedMetaDataId",
            "in": "query",
            "description": "If present, connector metadata IDs in this list will not be queried.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }, {
            "name": "serverId",
            "in": "query",
            "description": "The server ID associated with messages.",
            "required": false,
            "type": "string"
          }, {
            "name": "rawContentSearch",
            "in": "query",
            "description": "Searches the raw content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "processedRawContentSearch",
            "in": "query",
            "description": "Searches the processed raw content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "transformedContentSearch",
            "in": "query",
            "description": "Searches the transformed content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "encodedContentSearch",
            "in": "query",
            "description": "Searches the encoded content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "sentContentSearch",
            "in": "query",
            "description": "Searches the sent content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseContentSearch",
            "in": "query",
            "description": "Searches the response content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseTransformedContentSearch",
            "in": "query",
            "description": "Searches the response transformed content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "processedResponseContentSearch",
            "in": "query",
            "description": "Searches the processed response content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "connectorMapContentSearch",
            "in": "query",
            "description": "Searches the connector map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "channelMapContentSearch",
            "in": "query",
            "description": "Searches the channel map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "sourceMapContentSearch",
            "in": "query",
            "description": "Searches the source map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseMapContentSearch",
            "in": "query",
            "description": "Searches the response map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "processingErrorContentSearch",
            "in": "query",
            "description": "Searches the processing error content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "postprocessorErrorContentSearch",
            "in": "query",
            "description": "Searches the postprocessor error content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseErrorContentSearch",
            "in": "query",
            "description": "Searches the response error content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "metaDataSearch",
            "in": "query",
            "description": "Searches a custom metadata column. Value should be in the form: COLUMN_NAME &lt;operator&gt; value, where operator is one of the following: =, !=, <, <=, >, >=, CONTAINS, DOES NOT CONTAIN, STARTS WITH, DOES NOT START WITH, ENDS WITH, DOES NOT END WITH",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "metaDataCaseInsensitiveSearch",
            "in": "query",
            "description": "Searches a custom metadata column, ignoring case. Value should be in the form: COLUMN_NAME &lt;operator&gt; value.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "textSearchMetaDataColumn",
            "in": "query",
            "description": "When using a text search, these custom metadata columns will also be searched.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "minSendAttempts",
            "in": "query",
            "description": "The minimum number of send attempts for connector messages.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "maxSendAttempts",
            "in": "query",
            "description": "The maximum number of send attempts for connector messages.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "attachment",
            "in": "query",
            "description": "If true, only messages with attachments are included in the results.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "error",
            "in": "query",
            "description": "If true, only messages with errors are included in the results.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of messages that will be queried at a time.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "contentType",
            "in": "query",
            "description": "The ContentType that will be extracted from the message for writing. If null or not provided, the entire message will be written in serialized format.",
            "required": false,
            "type": "string",
            "enum": [
              "RAW", "PROCESSED_RAW", "TRANSFORMED", "ENCODED", "SENT", "RESPONSE", "RESPONSE_TRANSFORMED", "PROCESSED_RESPONSE", "CONNECTOR_MAP", "CHANNEL_MAP", "RESPONSE_MAP", "PROCESSING_ERROR", "POSTPROCESSOR_ERROR", "RESPONSE_ERROR",
              "SOURCE_MAP"
            ]
          }, {
            "name": "destinationContent",
            "in": "query",
            "description": "If true, the content to write will be extracted from the destination message(s), rather than the source message.",
            "required": false,
            "type": "boolean",
            "default": false
          }, {
            "name": "encrypt",
            "in": "query",
            "description": "If true, message content will be encrypted before writing.",
            "required": false,
            "type": "boolean",
            "default": false
          }, {
            "name": "includeAttachments",
            "in": "query",
            "description": "Determines whether attachments will be included with messages.",
            "required": false,
            "type": "boolean",
            "default": false
          }, {
            "name": "baseFolder",
            "in": "query",
            "description": "The base directory to use when resolving relative paths in the root folder.",
            "required": false,
            "type": "string"
          }, {
            "name": "rootFolder",
            "in": "query",
            "description": "The root folder to contain the written messages/sub-folders.",
            "required": false,
            "type": "string"
          }, {
            "name": "filePattern",
            "in": "query",
            "description": "A string defining the folder/filename(s) for writing messages. It may contain variables to be replaced.",
            "required": false,
            "type": "string"
          }, {
            "name": "archiveFileName",
            "in": "query",
            "description": "The file name to use for archive exports.",
            "required": false,
            "type": "string"
          }, {
            "name": "archiveFormat",
            "in": "query",
            "description": "The archiver format to use to archive messages/folders that are written to the root folder. Valid values: zip, tar",
            "required": false,
            "type": "string"
          }, {
            "name": "compressFormat",
            "in": "query",
            "description": "The compressor format to use to compress the archive file. Only valid when using the TAR archive format. Valid values: gz, bzip2",
            "required": false,
            "type": "string"
          }, {
            "name": "password",
            "in": "query",
            "description": "The password used to protect the archive file. Only valid when using the ZIP archive format.",
            "required": false,
            "type": "string"
          }, {
            "name": "encryptionType",
            "in": "query",
            "description": "The algorithm used to encrypt the password-protected archive file. Only valid when using the ZIP archive format. Valid values: STANDARD, AES128, AES256",
            "required": false,
            "type": "string",
            "enum": ["STANDARD", "AES128", "AES256"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      }
    },
    "/channels/{channelId}/messages/_exportUsingFilter": {
      "post": {
        "tags": ["Messages"],
        "summary": "Exports messages into a specific directory path accessible by the server.",
        "description": "",
        "operationId": "exportMessagesServer",
        "consumes": ["multipart/form-data"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "filter",
            "in": "formData",
            "description": "The MessageFilter object to use to query messages by.",
            "required": true,
            "type": "ref"
          }, {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of messages that will be queried at a time.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "writerOptions",
            "in": "formData",
            "description": "The MessageWriterOptions object containing various export options.",
            "required": false,
            "type": "ref"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      }
    },
    "/channels/{channelId}/messages/_import": {
      "post": {
        "tags": ["Messages"],
        "summary": "Imports a Message object into a channel. The message will not actually be processed through the channel, only imported.",
        "description": "",
        "operationId": "importMessage",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The Message object to import.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/messages/_importFromPath": {
      "post": {
        "tags": ["Messages"],
        "summary": "Imports messages into a channel from a path accessible by the server. The messages will not actually be processed through the channel, only imported.",
        "description": "",
        "operationId": "importMessagesServer",
        "consumes": ["text/plain"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The directory path on the server side to import messages from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }, {
            "name": "includeSubfolders",
            "in": "query",
            "description": "If true, sub-folders will also be scanned recursively for messages.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MessageImportResult"
            }
          }
        }
      }
    },
    "/channels/{channelId}/messages/_remove": {
      "post": {
        "tags": ["Messages"],
        "summary": "Remove messages by specific filter criteria.",
        "description": "",
        "operationId": "removeMessages",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The MessageFilter object to use to query messages by.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MessageFilter"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/messages/_removeAll": {
      "delete": {
        "tags": ["Messages"],
        "summary": "Removes all messages for the specified channel.",
        "description": "",
        "operationId": "removeAllMessages",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "restartRunningChannels",
            "in": "query",
            "description": "If true, currently running channels will be stopped and restarted as part of the remove process. Otherwise, currently running channels will not be included.",
            "required": false,
            "type": "boolean",
            "default": false
          }, {
            "name": "clearStatistics",
            "in": "query",
            "description": "If true, message statistics will also be cleared.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/messages/_reprocess": {
      "post": {
        "tags": ["Messages"],
        "summary": "Reprocesses messages through a channel by specific filter criteria.",
        "description": "",
        "operationId": "reprocessMessages",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "minMessageId",
            "in": "query",
            "description": "The minimum message ID to query.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "maxMessageId",
            "in": "query",
            "description": "The maximum message ID to query.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "minOriginalId",
            "in": "query",
            "description": "The minimum original message ID to query. Messages that have been reprocessed will retain their original message ID.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "maxOriginalId",
            "in": "query",
            "description": "The maximum original message ID to query. Messages that have been reprocessed will retain their original message ID.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "minImportId",
            "in": "query",
            "description": "The minimum import message ID to query. Messages that have been imported will retain their original message ID under this value.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "maxImportId",
            "in": "query",
            "description": "The maximum import message ID to query. Messages that have been imported will retain their original message ID under this value.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "startDate",
            "in": "query",
            "description": "The earliest original received date to query by. Example: 1985-10-26T09:00:00.000-0700",
            "required": false,
            "type": "string",
            "format": "date-time"
          }, {
            "name": "endDate",
            "in": "query",
            "description": "The latest original received date to query by. Example: 2015-10-21T07:28:00.000-0700",
            "required": false,
            "type": "string",
            "format": "date-time"
          }, {
            "name": "textSearch",
            "in": "query",
            "description": "Searches all message content for this string. This process could take a long time depending on the amount of message content currently stored. Any message content that was encrypted by this channel will not be searchable.",
            "required": false,
            "type": "string"
          }, {
            "name": "textSearchRegex",
            "in": "query",
            "description": "If true, text search input will be considered a regular expression pattern to be matched. Only supported by PostgreSQL, MySQL and Oracle databases.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "status",
            "in": "query",
            "description": "Determines which message statuses to query by.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["RECEIVED", "FILTERED", "TRANSFORMED", "SENT", "QUEUED", "ERROR", "PENDING"]
            },
            "collectionFormat": "multi"
          }, {
            "name": "includedMetaDataId",
            "in": "query",
            "description": "If present, only connector metadata IDs in this list will be queried.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }, {
            "name": "excludedMetaDataId",
            "in": "query",
            "description": "If present, connector metadata IDs in this list will not be queried.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }, {
            "name": "serverId",
            "in": "query",
            "description": "The server ID associated with messages.",
            "required": false,
            "type": "string"
          }, {
            "name": "rawContentSearch",
            "in": "query",
            "description": "Searches the raw content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "processedRawContentSearch",
            "in": "query",
            "description": "Searches the processed raw content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "transformedContentSearch",
            "in": "query",
            "description": "Searches the transformed content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "encodedContentSearch",
            "in": "query",
            "description": "Searches the encoded content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "sentContentSearch",
            "in": "query",
            "description": "Searches the sent content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseContentSearch",
            "in": "query",
            "description": "Searches the response content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseTransformedContentSearch",
            "in": "query",
            "description": "Searches the response transformed content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "processedResponseContentSearch",
            "in": "query",
            "description": "Searches the processed response content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "connectorMapContentSearch",
            "in": "query",
            "description": "Searches the connector map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "channelMapContentSearch",
            "in": "query",
            "description": "Searches the channel map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "sourceMapContentSearch",
            "in": "query",
            "description": "Searches the source map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseMapContentSearch",
            "in": "query",
            "description": "Searches the response map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "processingErrorContentSearch",
            "in": "query",
            "description": "Searches the processing error content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "postprocessorErrorContentSearch",
            "in": "query",
            "description": "Searches the postprocessor error content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseErrorContentSearch",
            "in": "query",
            "description": "Searches the response error content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "metaDataSearch",
            "in": "query",
            "description": "Searches a custom metadata column. Value should be in the form: COLUMN_NAME &lt;operator&gt; value, where operator is one of the following: =, !=, <, <=, >, >=, CONTAINS, DOES NOT CONTAIN, STARTS WITH, DOES NOT START WITH, ENDS WITH, DOES NOT END WITH",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "metaDataCaseInsensitiveSearch",
            "in": "query",
            "description": "Searches a custom metadata column, ignoring case. Value should be in the form: COLUMN_NAME &lt;operator&gt; value.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "textSearchMetaDataColumn",
            "in": "query",
            "description": "When using a text search, these custom metadata columns will also be searched.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "minSendAttempts",
            "in": "query",
            "description": "The minimum number of send attempts for connector messages.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "maxSendAttempts",
            "in": "query",
            "description": "The maximum number of send attempts for connector messages.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "attachment",
            "in": "query",
            "description": "If true, only messages with attachments are included in the results.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "error",
            "in": "query",
            "description": "If true, only messages with errors are included in the results.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "replace",
            "in": "query",
            "description": "If true, the message will overwrite the current one",
            "required": false,
            "type": "boolean",
            "default": false
          }, {
            "name": "filterDestinations",
            "in": "query",
            "description": "If true, the metaDataId parameter will be used to determine which destinations to reprocess the message through.",
            "required": false,
            "type": "boolean",
            "default": false
          }, {
            "name": "metaDataId",
            "in": "query",
            "description": "Indicates which destinations to send the message to.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/messages/_reprocessWithFilter": {
      "post": {
        "tags": ["Messages"],
        "summary": "Reprocesses messages through a channel filtering with a MessageFilter.",
        "description": "",
        "operationId": "reprocessMessages",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The MessageFilter object to use to query messages by.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MessageFilter"
            }
          }, {
            "name": "replace",
            "in": "query",
            "description": "If true, the message will overwrite the current one",
            "required": false,
            "type": "boolean",
            "default": false
          }, {
            "name": "filterDestinations",
            "in": "query",
            "description": "If true, the metaDataId parameter will be used to determine which destinations to reprocess the message through.",
            "required": false,
            "type": "boolean",
            "default": false
          }, {
            "name": "metaDataId",
            "in": "query",
            "description": "Indicates which destinations to send the message to.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/messages/_search": {
      "post": {
        "tags": ["Messages"],
        "summary": "Search for messages by specific filter criteria.",
        "description": "",
        "operationId": "getMessages",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The MessageFilter object to use to query messages by.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MessageFilter"
            }
          }, {
            "name": "includeContent",
            "in": "query",
            "description": "If true, message content will be returned with the results.",
            "required": false,
            "type": "boolean",
            "default": false
          }, {
            "name": "offset",
            "in": "query",
            "description": "Used for pagination, determines where to start in the search results.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }, {
            "name": "limit",
            "in": "query",
            "description": "Used for pagination, determines the maximum number of results to return.",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Message"
              }
            }
          }
        }
      }
    },
    "/channels/{channelId}/messages/count": {
      "get": {
        "tags": ["Messages"],
        "summary": "Count number for messages by specific filter criteria.",
        "description": "",
        "operationId": "getMessageCount",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "minMessageId",
            "in": "query",
            "description": "The minimum message ID to query.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "maxMessageId",
            "in": "query",
            "description": "The maximum message ID to query.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "minOriginalId",
            "in": "query",
            "description": "The minimum original message ID to query. Messages that have been reprocessed will retain their original message ID.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "maxOriginalId",
            "in": "query",
            "description": "The maximum original message ID to query. Messages that have been reprocessed will retain their original message ID.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "minImportId",
            "in": "query",
            "description": "The minimum import message ID to query. Messages that have been imported will retain their original message ID under this value.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "maxImportId",
            "in": "query",
            "description": "The maximum import message ID to query. Messages that have been imported will retain their original message ID under this value.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "startDate",
            "in": "query",
            "description": "The earliest original received date to query by. Example: 1985-10-26T09:00:00.000-0700",
            "required": false,
            "type": "string",
            "format": "date-time"
          }, {
            "name": "endDate",
            "in": "query",
            "description": "The latest original received date to query by. Example: 2015-10-21T07:28:00.000-0700",
            "required": false,
            "type": "string",
            "format": "date-time"
          }, {
            "name": "textSearch",
            "in": "query",
            "description": "Searches all message content for this string. This process could take a long time depending on the amount of message content currently stored. Any message content that was encrypted by this channel will not be searchable.",
            "required": false,
            "type": "string"
          }, {
            "name": "textSearchRegex",
            "in": "query",
            "description": "If true, text search input will be considered a regular expression pattern to be matched. Only supported by PostgreSQL, MySQL and Oracle databases.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "status",
            "in": "query",
            "description": "Determines which message statuses to query by.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["RECEIVED", "FILTERED", "TRANSFORMED", "SENT", "QUEUED", "ERROR", "PENDING"]
            },
            "collectionFormat": "multi"
          }, {
            "name": "includedMetaDataId",
            "in": "query",
            "description": "If present, only connector metadata IDs in this list will be queried.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }, {
            "name": "excludedMetaDataId",
            "in": "query",
            "description": "If present, connector metadata IDs in this list will not be queried.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }, {
            "name": "serverId",
            "in": "query",
            "description": "The server ID associated with messages.",
            "required": false,
            "type": "string"
          }, {
            "name": "rawContentSearch",
            "in": "query",
            "description": "Searches the raw content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "processedRawContentSearch",
            "in": "query",
            "description": "Searches the processed raw content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "transformedContentSearch",
            "in": "query",
            "description": "Searches the transformed content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "encodedContentSearch",
            "in": "query",
            "description": "Searches the encoded content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "sentContentSearch",
            "in": "query",
            "description": "Searches the sent content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseContentSearch",
            "in": "query",
            "description": "Searches the response content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseTransformedContentSearch",
            "in": "query",
            "description": "Searches the response transformed content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "processedResponseContentSearch",
            "in": "query",
            "description": "Searches the processed response content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "connectorMapContentSearch",
            "in": "query",
            "description": "Searches the connector map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "channelMapContentSearch",
            "in": "query",
            "description": "Searches the channel map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "sourceMapContentSearch",
            "in": "query",
            "description": "Searches the source map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseMapContentSearch",
            "in": "query",
            "description": "Searches the response map content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "processingErrorContentSearch",
            "in": "query",
            "description": "Searches the processing error content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "postprocessorErrorContentSearch",
            "in": "query",
            "description": "Searches the postprocessor error content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "responseErrorContentSearch",
            "in": "query",
            "description": "Searches the response error content of messages.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "metaDataSearch",
            "in": "query",
            "description": "Searches a custom metadata column. Value should be in the form: COLUMN_NAME &lt;operator&gt; value, where operator is one of the following: =, !=, <, <=, >, >=, CONTAINS, DOES NOT CONTAIN, STARTS WITH, DOES NOT START WITH, ENDS WITH, DOES NOT END WITH",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "metaDataCaseInsensitiveSearch",
            "in": "query",
            "description": "Searches a custom metadata column, ignoring case. Value should be in the form: COLUMN_NAME &lt;operator&gt; value.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "textSearchMetaDataColumn",
            "in": "query",
            "description": "When using a text search, these custom metadata columns will also be searched.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "minSendAttempts",
            "in": "query",
            "description": "The minimum number of send attempts for connector messages.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "maxSendAttempts",
            "in": "query",
            "description": "The maximum number of send attempts for connector messages.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "attachment",
            "in": "query",
            "description": "If true, only messages with attachments are included in the results.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "error",
            "in": "query",
            "description": "If true, only messages with errors are included in the results.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      }
    },
    "/channels/{channelId}/messages/count/_search": {
      "post": {
        "tags": ["Messages"],
        "summary": "Count number for messages by specific filter criteria.",
        "description": "",
        "operationId": "getMessageCount",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The MessageFilter object to use to query messages by.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MessageFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      }
    },
    "/channels/{channelId}/messages/maxMessageId": {
      "get": {
        "tags": ["Messages"],
        "summary": "Returns the maximum message ID for the given channel.",
        "description": "",
        "operationId": "getMaxMessageId",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      }
    },
    "/channels/{channelId}/messages/{messageId}": {
      "get": {
        "tags": ["Messages"],
        "summary": "Retrieve a message by ID.",
        "description": "",
        "operationId": "getMessageContent",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "messageId",
            "in": "path",
            "description": "The ID of the message.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "metaDataId",
            "in": "query",
            "description": "The metadata IDs of the connectors.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      },
      "delete": {
        "tags": ["Messages"],
        "summary": "Remove a single message by ID.",
        "description": "",
        "operationId": "removeMessage",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "messageId",
            "in": "path",
            "description": "The ID of the message.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "metaDataId",
            "in": "query",
            "description": "If present, only the specific connector message will be removed. If the metadata ID is 0, the entire message will be removed.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/messages/{messageId}/_getDICOMMessage": {
      "post": {
        "tags": ["Messages"],
        "summary": "Given a ConnectorMessage object, reattaches any DICOM attachment data and returns the raw Base64 encoded message data.",
        "description": "",
        "operationId": "getDICOMMessage",
        "consumes": ["application/xml"],
        "produces": ["text/plain"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "messageId",
            "in": "path",
            "description": "The ID of the message.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }, {
            "in": "body",
            "name": "body",
            "description": "The ConnectorMessage to retrieve DICOM data for.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectorMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/channels/{channelId}/messages/{messageId}/_reprocess": {
      "post": {
        "tags": ["Messages"],
        "summary": "Reprocesses and overwrites a single message.",
        "description": "",
        "operationId": "reprocessMessage",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "messageId",
            "in": "path",
            "description": "The ID of the message.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "replace",
            "in": "query",
            "description": "If true, the message will overwrite the current one",
            "required": false,
            "type": "boolean",
            "default": false
          }, {
            "name": "filterDestinations",
            "in": "query",
            "description": "If true, the metaDataId parameter will be used to determine which destinations to reprocess the message through.",
            "required": false,
            "type": "boolean",
            "default": false
          }, {
            "name": "metaDataId",
            "in": "query",
            "description": "Indicates which destinations to send the message to.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/messages/{messageId}/attachments": {
      "get": {
        "tags": ["Messages"],
        "summary": "Retrieve a list of attachments by message ID.",
        "description": "",
        "operationId": "getAttachmentsByMessageId",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "messageId",
            "in": "path",
            "description": "The ID of the message.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "includeContent",
            "in": "query",
            "description": "If false, only the attachment ID and type will be returned.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attachment"
              }
            }
          }
        }
      }
    },
    "/channels/{channelId}/messages/{messageId}/attachments/{attachmentId}": {
      "get": {
        "tags": ["Messages"],
        "summary": "Retrieve a message attachment by ID.",
        "description": "",
        "operationId": "getAttachment",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "messageId",
            "in": "path",
            "description": "The ID of the message.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "attachmentId",
            "in": "path",
            "description": "The ID of the attachment.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          }
        }
      }
    },
    "/channels/{channelId}/messages/{messageId}/attachments/{attachmentId}/_export": {
      "post": {
        "tags": ["Messages"],
        "summary": "Exports a message attachment into a specific file path accessible by the server.",
        "description": "",
        "operationId": "exportAttachmentServer",
        "consumes": ["text/plain"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "messageId",
            "in": "path",
            "description": "The ID of the message.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }, {
            "name": "attachmentId",
            "in": "path",
            "description": "The ID of the attachment.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The file path to export the attachment to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }, {
            "name": "binary",
            "in": "query",
            "description": "Indicates that the attachment is binary and should be Base64 decoded before writing to file.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/channels/{channelId}/messagesWithObj": {
      "post": {
        "tags": ["Messages"],
        "summary": "Processes a new message through a channel, using the RawMessage object.",
        "description": "",
        "operationId": "processMessage",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The RawMessage object to process.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RawMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      }
    },
    "/channels/{channelId}/metaDataColumns": {
      "get": {
        "tags": ["Channels"],
        "summary": "Returns all metadata columns for a channel.",
        "description": "",
        "operationId": "getMetaDataColumns",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetaDataColumn"
              }
            }
          }
        }
      }
    },
    "/channels/{channelId}/statistics": {
      "get": {
        "tags": ["Channel Statistics"],
        "summary": "Returns the Statistics for the channel with the specified id.",
        "description": "",
        "operationId": "getStatistics",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel to retrieve statistics for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ChannelStatistics"
            }
          }
        }
      }
    },
    "/channels/{channelId}/status": {
      "get": {
        "tags": ["Channel Status Operations"],
        "summary": "Returns the dashboard status for a single channel ID.",
        "description": "",
        "operationId": "getChannelStatus",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The channel ID to return a dashboard status for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DashboardStatus"
            }
          }
        }
      }
    },
    "/codeTemplateLibraries": {
      "get": {
        "tags": ["Code Templates"],
        "summary": "Retrieves multiple code template libraries by ID, or all libraries if not specified.",
        "description": "",
        "operationId": "getCodeTemplateLibraries",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "libraryId",
            "in": "query",
            "description": "The ID of the library(s) to retrieve.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "includeCodeTemplates",
            "in": "query",
            "description": "If true, full code templates will be included inside each library.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeTemplateLibrary"
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Code Templates"],
        "summary": "Replaces all code template libraries.",
        "description": "",
        "operationId": "updateCodeTemplateLibraries",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The list of code template libraries to replace with.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeTemplateLibrary"
              }
            }
          }, {
            "name": "override",
            "in": "query",
            "description": "If true, the code template library will be updated even if a different revision exists on the server.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/codeTemplateLibraries/_bulkUpdate": {
      "post": {
        "tags": ["Code Templates"],
        "summary": "Updates all libraries and updates/removes selected code templates in one request.",
        "description": "",
        "operationId": "updateLibrariesAndTemplates",
        "consumes": ["multipart/form-data"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "libraries",
            "in": "formData",
            "description": "The set of code template libraries to replace with.",
            "required": false,
            "type": "array",
            "items": {
              "$ref": "#/definitions/CodeTemplateLibrary"
            },
            "collectionFormat": "multi"
          }, {
            "name": "removedLibraryIds",
            "in": "formData",
            "description": "All library IDs known to be removed.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "updatedCodeTemplates",
            "in": "formData",
            "description": "The set of code templates to update.",
            "required": false,
            "type": "array",
            "items": {
              "$ref": "#/definitions/CodeTemplate"
            },
            "collectionFormat": "multi"
          }, {
            "name": "removedCodeTemplateIds",
            "in": "formData",
            "description": "All code template IDs known to be removed.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "override",
            "in": "query",
            "description": "If true, the libraries and code templates will be updated even if different revisions exist on the server.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CodeTemplateLibrarySaveResult"
            }
          }
        }
      }
    },
    "/codeTemplateLibraries/_getCodeTemplateLibraries": {
      "post": {
        "tags": ["Code Templates"],
        "summary": "Retrieves multiple code template libraries by ID, or all libraries if not specified. This is a POST request alternative to GET /codeTemplateLibraries that may be used when there are too many library IDs to include in the query parameters.",
        "description": "",
        "operationId": "getCodeTemplateLibrariesPost",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ID of the library(s) to retrieve.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }, {
            "name": "includeCodeTemplates",
            "in": "query",
            "description": "If true, full code templates will be included inside each library.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeTemplateLibrary"
              }
            }
          }
        }
      }
    },
    "/codeTemplateLibraries/{libraryId}": {
      "get": {
        "tags": ["Code Templates"],
        "summary": "Retrieves a single code template library.",
        "description": "",
        "operationId": "getCodeTemplateLibrary",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "libraryId",
            "in": "path",
            "description": "The ID of the library to retrieve.",
            "required": true,
            "type": "string"
          }, {
            "name": "includeCodeTemplates",
            "in": "query",
            "description": "If true, full code templates will be included inside each library.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CodeTemplateLibrary"
            }
          }
        }
      }
    },
    "/codeTemplates": {
      "get": {
        "tags": ["Code Templates"],
        "summary": "Retrieves multiple code templates by ID, or all templates if not specified.",
        "description": "",
        "operationId": "getCodeTemplates",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "codeTemplateId",
            "in": "query",
            "description": "The ID of the code template(s) to retrieve.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeTemplate"
              }
            }
          }
        }
      }
    },
    "/codeTemplates/_getCodeTemplates": {
      "post": {
        "tags": ["Code Templates"],
        "summary": "Retrieves multiple code templates by ID, or all templates if not specified. This is a POST request alternative to GET /codeTemplates that may be used when there are too many code template IDs to include in the query parameters.",
        "description": "",
        "operationId": "getCodeTemplatesPost",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ID of the code template(s) to retrieve.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeTemplate"
              }
            }
          }
        }
      }
    },
    "/codeTemplates/_getSummary": {
      "post": {
        "tags": ["Code Templates"],
        "summary": "Returns a list of code template summaries, indicating to a client which code templates have changed. If a code template was modified, the entire CodeTemplate object will be returned.",
        "description": "",
        "operationId": "getCodeTemplateSummary",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "A map of revisions telling the server the state of the client-side code template cache.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeTemplateSummary"
              }
            }
          }
        }
      }
    },
    "/codeTemplates/{codeTemplateId}": {
      "get": {
        "tags": ["Code Templates"],
        "summary": "Retrieves a single code template.",
        "description": "",
        "operationId": "getCodeTemplate",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "codeTemplateId",
            "in": "path",
            "description": "The ID of the code template to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CodeTemplate"
            }
          }
        }
      },
      "put": {
        "tags": ["Code Templates"],
        "summary": "Updates a single code template.",
        "description": "",
        "operationId": "updateCodeTemplate",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "codeTemplateId",
            "in": "path",
            "description": "The ID of the code template.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The CodeTemplate object to update with.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CodeTemplate"
            }
          }, {
            "name": "override",
            "in": "query",
            "description": "If true, the code template will be updated even if a different revision exists on the server.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      },
      "delete": {
        "tags": ["Code Templates"],
        "summary": "Removes a single code template.",
        "description": "",
        "operationId": "removeCodeTemplate",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "codeTemplateId",
            "in": "path",
            "description": "The ID of the code template.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/connectors/doc/_testWrite": {
      "post": {
        "tags": ["Connector Services"],
        "summary": "Tests whether a file can be written to the specified directory.",
        "description": "",
        "operationId": "testWrite",
        "consumes": ["text/plain", "application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "channelName",
            "in": "query",
            "description": "The name of the channel.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The directory to test writing to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConnectionTestResponse"
            }
          }
        }
      }
    },
    "/connectors/file/_testRead": {
      "post": {
        "tags": ["Connector Services"],
        "summary": "Tests whether a file can be read from the specified directory.",
        "description": "",
        "operationId": "testRead",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "channelName",
            "in": "query",
            "description": "The name of the channel.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The File Reader properties to use.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileReceiverProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConnectionTestResponse"
            }
          }
        }
      }
    },
    "/connectors/file/_testWrite": {
      "post": {
        "tags": ["Connector Services"],
        "summary": "Tests whether a file can be written to the specified directory.",
        "description": "",
        "operationId": "testWrite",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "channelName",
            "in": "query",
            "description": "The name of the channel.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The File Writer properties to use.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileDispatcherProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConnectionTestResponse"
            }
          }
        }
      }
    },
    "/connectors/http/_testConnection": {
      "post": {
        "tags": ["Connector Services"],
        "summary": "Tests whether a connection can be successfully established to the destination endpoint.",
        "description": "",
        "operationId": "testConnection",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "channelName",
            "in": "query",
            "description": "The name of the channel.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The HTTP Sender properties to use.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HttpDispatcherProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConnectionTestResponse"
            }
          }
        }
      }
    },
    "/connectors/jdbc/_getTables": {
      "post": {
        "tags": ["Connector Services"],
        "summary": "Executes a query to retrieve database table metadata.",
        "description": "",
        "operationId": "getTables",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "channelName",
            "in": "query",
            "description": "The name of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "driver",
            "in": "query",
            "description": "The JDBC driver class to use.",
            "required": true,
            "type": "string"
          }, {
            "name": "url",
            "in": "query",
            "description": "The JDBC connection URL to use.",
            "required": true,
            "type": "string"
          }, {
            "name": "username",
            "in": "query",
            "description": "The username to authenticate with.",
            "required": false,
            "type": "string"
          }, {
            "name": "password",
            "in": "query",
            "description": "The password to authenticate with.",
            "required": false,
            "type": "string"
          }, {
            "name": "tableNamePattern",
            "in": "query",
            "description": "If specified, filters by table name. Wildcards (* or %) are allowed.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "selectLimit",
            "in": "query",
            "description": "A simple query to use to retrieve database metadata information.",
            "required": false,
            "type": "string",
            "default": "SELECT * FROM ? LIMIT 1"
          }, {
            "name": "resourceId",
            "in": "query",
            "description": "Library resource IDs to use, if a custom driver is necessary.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/Table"
              }
            }
          }
        }
      }
    },
    "/connectors/jms/templates": {
      "get": {
        "tags": ["Connector Services"],
        "summary": "Retrieves JMS connector settings templates.",
        "description": "",
        "operationId": "getTemplates",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/JmsConnectorProperties"
              }
            }
          }
        }
      }
    },
    "/connectors/jms/templates/{templateName}": {
      "get": {
        "tags": ["Connector Services"],
        "summary": "Retrieves a single JMS connector settings template.",
        "description": "",
        "operationId": "getTemplate",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "The name of the template.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JmsConnectorProperties"
            }
          }
        }
      },
      "put": {
        "tags": ["Connector Services"],
        "summary": "Creates or updates a JMS connector settings template.",
        "description": "",
        "operationId": "saveTemplate",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "The name of the template.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The JMS connector properties to save.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JmsConnectorProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Connector Services"],
        "summary": "Creates or updates a JMS connector settings template.",
        "description": "",
        "operationId": "deleteTemplate",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "templateName",
            "in": "path",
            "description": "The name of the template.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/connectors/smtp/_sendTestEmail": {
      "post": {
        "tags": ["Connector Services"],
        "summary": "Sends a test e-mail, replacing any connector properties first.",
        "description": "",
        "operationId": "sendTestEmail",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "channelName",
            "in": "query",
            "description": "The name of the channel.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The SMTP Sender properties to use.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SmtpDispatcherProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConnectionTestResponse"
            }
          }
        }
      }
    },
    "/connectors/tcp/_testConnection": {
      "post": {
        "tags": ["Connector Services"],
        "summary": "Tests whether a connection can be successfully established to the destination endpoint.",
        "description": "",
        "operationId": "testConnection",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "channelName",
            "in": "query",
            "description": "The name of the channel.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The TCP Sender properties to use.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TcpDispatcherProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConnectionTestResponse"
            }
          }
        }
      }
    },
    "/connectors/ws/_cacheWsdlFromUrl": {
      "post": {
        "tags": ["Connector Services"],
        "summary": "Downloads the WSDL at the specified URL and caches the web service definition tree.",
        "description": "",
        "operationId": "cacheWsdlFromUrl",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "channelName",
            "in": "query",
            "description": "The name of the channel.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The Web Service Sender properties to use.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebServiceDispatcherProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/connectors/ws/_generateEnvelope": {
      "post": {
        "tags": ["Connector Services"],
        "summary": "Generate SOAP envelope for a given WSDL operation.",
        "description": "",
        "operationId": "generateEnvelope",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "formData",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "channelName",
            "in": "formData",
            "description": "The name of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "wsdlUrl",
            "in": "formData",
            "description": "The WSDL URL to check.",
            "required": true,
            "type": "string"
          }, {
            "name": "username",
            "in": "formData",
            "description": "Username used to authenticate to the web server.",
            "required": false,
            "type": "string"
          }, {
            "name": "password",
            "in": "formData",
            "description": "Password used to authenticate to the web server.",
            "required": false,
            "type": "string"
          }, {
            "name": "service",
            "in": "formData",
            "description": "The service name for the WSDL operation.",
            "required": false,
            "type": "string"
          }, {
            "name": "port",
            "in": "formData",
            "description": "The port / endpoint name for the service.",
            "required": false,
            "type": "string"
          }, {
            "name": "operation",
            "in": "formData",
            "description": "The name of the operation to generate an envelope for.",
            "required": false,
            "type": "string"
          }, {
            "name": "buildOptional",
            "in": "formData",
            "description": "Whether to include optional fields in the envelope.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/connectors/ws/_getDefinition": {
      "post": {
        "tags": ["Connector Services"],
        "summary": "Retrieves the definition service map corresponding to the specified WSDL.",
        "description": "",
        "operationId": "getDefinition",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "formData",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "channelName",
            "in": "formData",
            "description": "The name of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "wsdlUrl",
            "in": "formData",
            "description": "The WSDL URL to check.",
            "required": true,
            "type": "string"
          }, {
            "name": "username",
            "in": "formData",
            "description": "Username used to authenticate to the web server.",
            "required": false,
            "type": "string"
          }, {
            "name": "password",
            "in": "formData",
            "description": "Password used to authenticate to the web server.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DefinitionServiceMap"
            }
          }
        }
      }
    },
    "/connectors/ws/_getSoapAction": {
      "post": {
        "tags": ["Connector Services"],
        "summary": "Retrieves the default SOAP Action for a given WSDL operation.",
        "description": "",
        "operationId": "getSoapAction",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["text/plain"],
        "parameters": [
          {
            "name": "channelId",
            "in": "formData",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "channelName",
            "in": "formData",
            "description": "The name of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "wsdlUrl",
            "in": "formData",
            "description": "The WSDL URL to check.",
            "required": true,
            "type": "string"
          }, {
            "name": "username",
            "in": "formData",
            "description": "Username used to authenticate to the web server.",
            "required": false,
            "type": "string"
          }, {
            "name": "password",
            "in": "formData",
            "description": "Password used to authenticate to the web server.",
            "required": false,
            "type": "string"
          }, {
            "name": "service",
            "in": "formData",
            "description": "The service name for the WSDL operation.",
            "required": false,
            "type": "string"
          }, {
            "name": "port",
            "in": "formData",
            "description": "The port / endpoint name for the service.",
            "required": false,
            "type": "string"
          }, {
            "name": "operation",
            "in": "formData",
            "description": "The name of the operation to generate an envelope for.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/connectors/ws/_isWsdlCached": {
      "post": {
        "tags": ["Connector Services"],
        "summary": "Returns true if the definition tree for the WSDL is cached by the server.",
        "description": "",
        "operationId": "isWsdlCached",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "formData",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "channelName",
            "in": "formData",
            "description": "The name of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "wsdlUrl",
            "in": "formData",
            "description": "The WSDL URL to check.",
            "required": true,
            "type": "string"
          }, {
            "name": "username",
            "in": "formData",
            "description": "Username used to authenticate to the web server.",
            "required": false,
            "type": "string"
          }, {
            "name": "password",
            "in": "formData",
            "description": "Password used to authenticate to the web server.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/connectors/ws/_testConnection": {
      "post": {
        "tags": ["Connector Services"],
        "summary": "Tests whether a connection can be successfully established to the destination endpoint.",
        "description": "",
        "operationId": "testConnection",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "The ID of the channel.",
            "required": true,
            "type": "string"
          }, {
            "name": "channelName",
            "in": "query",
            "description": "The name of the channel.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The Web Service Sender properties to use.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebServiceDispatcherProperties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConnectionTestResponse"
            }
          }
        }
      }
    },
    "/databaseTasks": {
      "get": {
        "tags": ["Database Tasks"],
        "summary": "Retrieves all current database tasks.",
        "description": "",
        "operationId": "getDatabaseTasks",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/DatabaseTask"
              }
            }
          }
        }
      }
    },
    "/databaseTasks/{databaseTaskId}": {
      "get": {
        "tags": ["Database Tasks"],
        "summary": "Retrieves a single database task.",
        "description": "",
        "operationId": "getDatabaseTask",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "databaseTaskId",
            "in": "path",
            "description": "The ID of the database task.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DatabaseTask"
            }
          }
        }
      }
    },
    "/databaseTasks/{databaseTaskId}/_cancel": {
      "post": {
        "tags": ["Database Tasks"],
        "summary": "Cancels execution of the specified database task.",
        "description": "",
        "operationId": "cancelDatabaseTask",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "databaseTaskId",
            "in": "path",
            "description": "The ID of the database task.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/databaseTasks/{databaseTaskId}/_run": {
      "post": {
        "tags": ["Database Tasks"],
        "summary": "Executes the specified database task.",
        "description": "",
        "operationId": "runDatabaseTask",
        "consumes": ["application/xml"],
        "produces": ["text/plain"],
        "parameters": [
          {
            "name": "databaseTaskId",
            "in": "path",
            "description": "The ID of the database task.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": ["Events"],
        "summary": "Search for events by specific filter criteria.",
        "description": "",
        "operationId": "getEvents",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "maxEventId",
            "in": "query",
            "description": "The maximum event ID to query.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "minEventId",
            "in": "query",
            "description": "The minimum event ID to query.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "level",
            "in": "query",
            "description": "The type of events to query.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["INFORMATION", "WARNING", "ERROR"]
            },
            "collectionFormat": "multi"
          }, {
            "name": "startDate",
            "in": "query",
            "description": "The earliest event date to query by. Example: 1985-10-26T09:00:00.000-0700",
            "required": false,
            "type": "string",
            "format": "date-time"
          }, {
            "name": "endDate",
            "in": "query",
            "description": "The latest event date to query by. Example: 2015-10-21T07:28:00.000-0700",
            "required": false,
            "type": "string",
            "format": "date-time"
          }, {
            "name": "name",
            "in": "query",
            "description": "Searches the event name for this string.",
            "required": false,
            "type": "string"
          }, {
            "name": "outcome",
            "in": "query",
            "description": "Searches on whether the event outcome was successful or not.",
            "required": false,
            "type": "string",
            "enum": ["SUCCESS", "FAILURE"]
          }, {
            "name": "userId",
            "in": "query",
            "description": "The user ID to query events by.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "ipAddress",
            "in": "query",
            "description": "The IP address that originated the event.",
            "required": false,
            "type": "string"
          }, {
            "name": "serverId",
            "in": "query",
            "description": "The ID of the server that the event was created from.",
            "required": false,
            "type": "string"
          }, {
            "name": "offset",
            "in": "query",
            "description": "Used for pagination, determines where to start in the search results.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }, {
            "name": "limit",
            "in": "query",
            "description": "Used for pagination, determines the maximum number of results to return.",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServerEvent"
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Events"],
        "summary": "Remove all events.",
        "description": "",
        "operationId": "removeAllEvents",
        "consumes": ["application/xml"],
        "produces": ["text/plain"],
        "parameters": [
          {
            "name": "export",
            "in": "query",
            "description": "If true, messages will be exported into the application data directory on the server before being removed.",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/events/_export": {
      "post": {
        "tags": ["Events"],
        "summary": "Exports all events to the application data directory on the server.",
        "description": "",
        "operationId": "exportAllEvents",
        "consumes": ["application/xml"],
        "produces": ["text/plain"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/events/_search": {
      "post": {
        "tags": ["Events"],
        "summary": "Search for events by specific filter criteria.",
        "description": "",
        "operationId": "getEvents",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The EventFilter object to use to query events by.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventFilter"
            }
          }, {
            "name": "offset",
            "in": "query",
            "description": "Used for pagination, determines where to start in the search results.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }, {
            "name": "limit",
            "in": "query",
            "description": "Used for pagination, determines the maximum number of results to return.",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServerEvent"
              }
            }
          }
        }
      }
    },
    "/events/count": {
      "get": {
        "tags": ["Events"],
        "summary": "Count number for events by specific filter criteria.",
        "description": "",
        "operationId": "getEventCount",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "maxEventId",
            "in": "query",
            "description": "The maximum event ID to query.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "minEventId",
            "in": "query",
            "description": "The minimum event ID to query.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "level",
            "in": "query",
            "description": "The type of events to query.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["INFORMATION", "WARNING", "ERROR"]
            },
            "collectionFormat": "multi"
          }, {
            "name": "startDate",
            "in": "query",
            "description": "The earliest event date to query by. Example: 1985-10-26T09:00:00.000-0700",
            "required": false,
            "type": "string",
            "format": "date-time"
          }, {
            "name": "endDate",
            "in": "query",
            "description": "The latest event date to query by. Example: 2015-10-21T07:28:00.000-0700",
            "required": false,
            "type": "string",
            "format": "date-time"
          }, {
            "name": "name",
            "in": "query",
            "description": "Searches the event name for this string.",
            "required": false,
            "type": "string"
          }, {
            "name": "outcome",
            "in": "query",
            "description": "Searches on whether the event outcome was successful or not.",
            "required": false,
            "type": "string",
            "enum": ["SUCCESS", "FAILURE"]
          }, {
            "name": "userId",
            "in": "query",
            "description": "The user ID to query events by.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "ipAddress",
            "in": "query",
            "description": "The IP address that originated the event.",
            "required": false,
            "type": "string"
          }, {
            "name": "serverId",
            "in": "query",
            "description": "The ID of the server that the event was created from.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      }
    },
    "/events/count/_search": {
      "post": {
        "tags": ["Events"],
        "summary": "Count number for events by specific filter criteria.",
        "description": "",
        "operationId": "getEventCount",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The EventFilter object to use to query events by.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      }
    },
    "/events/maxEventId": {
      "get": {
        "tags": ["Events"],
        "summary": "Returns the maximum event ID currently in the database.",
        "description": "",
        "operationId": "getMaxEventId",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      }
    },
    "/events/{eventId}": {
      "get": {
        "tags": ["Events"],
        "summary": "Retrieves an event by ID.",
        "description": "",
        "operationId": "getEvent",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServerEvent"
            }
          }
        }
      }
    },
    "/extensions/_install": {
      "post": {
        "tags": ["Extensions"],
        "summary": "Installs an extension.",
        "description": "",
        "operationId": "installExtension",
        "consumes": ["multipart/form-data"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The extension file to upload.",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/extensions/_uninstall": {
      "post": {
        "tags": ["Extensions"],
        "summary": "Uninstalls an extension.",
        "description": "",
        "operationId": "uninstallExtension",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The path attribute of the extension to uninstall.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/extensions/connectors": {
      "get": {
        "tags": ["Extensions"],
        "summary": "Returns all active connector metadata.",
        "description": "",
        "operationId": "getConnectorMetaData",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ConnectorMetaData"
              }
            }
          }
        }
      }
    },
    "/extensions/dashboardstatus/channelStates": {
      "get": {
        "tags": ["Extension Services"],
        "summary": "Retrieves all dashboard channel states.",
        "description": "",
        "operationId": "getChannelStates",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/extensions/dashboardstatus/channelStates/{channelId}": {
      "get": {
        "tags": ["Extension Services"],
        "summary": "Retrieves a single dashboard channel state.",
        "description": "",
        "operationId": "getChannelState",
        "consumes": ["application/xml"],
        "produces": ["text/plain"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The channel ID to return a dashboard status for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/extensions/dashboardstatus/connectionLogs": {
      "get": {
        "tags": ["Extension Services"],
        "summary": "Retrieves connection logs for all channels.",
        "description": "",
        "operationId": "getAllChannelLogs",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "serverId",
            "in": "query",
            "description": "The server ID to retrieve logs for. Logs for all servers are retrieved is this parameter is not specified.",
            "required": false,
            "type": "string"
          }, {
            "name": "fetchSize",
            "in": "query",
            "description": "Specifies the maximum number of log items to return.",
            "required": true,
            "type": "integer",
            "default": 100,
            "format": "int32"
          }, {
            "name": "lastLogId",
            "in": "query",
            "description": "The last log ID the client retrieved. Only log items with a greater ID will be returned.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConnectionLogItem"
              }
            }
          }
        }
      }
    },
    "/extensions/dashboardstatus/connectionLogs/{channelId}": {
      "get": {
        "tags": ["Extension Services"],
        "summary": "Retrieves connection logs for a specific channel.",
        "description": "",
        "operationId": "getChannelLog",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "serverId",
            "in": "query",
            "description": "The server ID to retrieve logs for. Logs for all servers are retrieved is this parameter is not specified.",
            "required": false,
            "type": "string"
          }, {
            "name": "channelId",
            "in": "path",
            "description": "The channel ID to retrieve logs for.",
            "required": true,
            "type": "string"
          }, {
            "name": "fetchSize",
            "in": "query",
            "description": "Specifies the maximum number of log items to return.",
            "required": true,
            "type": "integer",
            "default": 100,
            "format": "int32"
          }, {
            "name": "lastLogId",
            "in": "query",
            "description": "The last log ID the client retrieved. Only log items with a greater ID will be returned.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConnectionLogItem"
              }
            }
          }
        }
      }
    },
    "/extensions/dashboardstatus/connectorStates": {
      "get": {
        "tags": ["Extension Services"],
        "summary": "Retrieves all dashboard connector states.",
        "description": "",
        "operationId": "getConnectorStateMap",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "serverId",
            "in": "query",
            "description": "The server ID to retrieve connector statuses for. Connector Statuses across all servers are retrieved is this parameter is not specified.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/extensions/datapruner/_start": {
      "post": {
        "tags": ["Extension Services"],
        "summary": "Starts the data pruner on-demand.",
        "description": "",
        "operationId": "start",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      }
    },
    "/extensions/datapruner/_stop": {
      "post": {
        "tags": ["Extension Services"],
        "summary": "Stops the data pruner if currently running.",
        "description": "",
        "operationId": "stop",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/extensions/datapruner/status": {
      "get": {
        "tags": ["Extension Services"],
        "summary": "Retrieves the current data pruner status.",
        "description": "",
        "operationId": "getStatusMap",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/extensions/directoryresource/resources/{resourceId}/libraries": {
      "get": {
        "tags": ["Extension Services"],
        "summary": "Retrieves all library URLs for the given directory resource.",
        "description": "",
        "operationId": "getLibraries",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "The ID of the directory resource.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/extensions/globalmapviewer/maps/_getAllMaps": {
      "post": {
        "tags": ["Extension Services"],
        "summary": "Retrieves global and/or global channel map information. This is a POST request alternative to GET /maps/all that may be used when there are too many channel IDs to include in the query parameters.",
        "description": "",
        "operationId": "getAllMapsPost",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ID of the channel to retrieve global channel map information for.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }, {
            "name": "includeGlobalMap",
            "in": "query",
            "description": "If true, the global map will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/extensions/globalmapviewer/maps/all": {
      "get": {
        "tags": ["Extension Services"],
        "summary": "Retrieves global and/or global channel map information.",
        "description": "",
        "operationId": "getAllMaps",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "query",
            "description": "The ID of the channel to retrieve global channel map information for.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }, {
            "name": "includeGlobalMap",
            "in": "query",
            "description": "If true, the global map will be returned.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/extensions/globalmapviewer/maps/global": {
      "get": {
        "tags": ["Extension Services"],
        "summary": "Retrieves global map information.",
        "description": "",
        "operationId": "getGlobalMap",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/extensions/globalmapviewer/maps/{channelId}": {
      "get": {
        "tags": ["Extension Services"],
        "summary": "Retrieves global channel map information for a single channel.",
        "description": "",
        "operationId": "getGlobalChannelMap",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "The ID of the channel to retrieve global channel map information for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/extensions/plugins": {
      "get": {
        "tags": ["Extensions"],
        "summary": "Returns all active plugin metadata.",
        "description": "",
        "operationId": "getPluginMetaData",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/PluginMetaData"
              }
            }
          }
        }
      }
    },
    "/extensions/serverlog": {
      "get": {
        "tags": ["Extension Services"],
        "summary": "Retrieves server log entries.",
        "description": "",
        "operationId": "getServerLogs",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "fetchSize",
            "in": "query",
            "description": "Specifies the maximum number of log items to return.",
            "required": true,
            "type": "integer",
            "default": 100,
            "format": "int32"
          }, {
            "name": "lastLogId",
            "in": "query",
            "description": "The last log ID the client retrieved. Only log items with a greater ID will be returned.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServerLogItem"
              }
            }
          }
        }
      }
    },
    "/extensions/{extensionName}": {
      "get": {
        "tags": ["Extensions"],
        "summary": "Returns extension metadata by name.",
        "description": "",
        "operationId": "getExtensionMetaData",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "extensionName",
            "in": "path",
            "description": "The name of the extension to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MetaData"
            }
          }
        }
      }
    },
    "/extensions/{extensionName}/_setEnabled": {
      "post": {
        "tags": ["Extensions"],
        "summary": "Enables or disables an extension.",
        "description": "",
        "operationId": "setExtensionEnabled",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "extensionName",
            "in": "path",
            "description": "The name of the extension to retrieve.",
            "required": true,
            "type": "string"
          }, {
            "name": "enabled",
            "in": "query",
            "description": "The new enabled status to set.",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/extensions/{extensionName}/enabled": {
      "get": {
        "tags": ["Extensions"],
        "summary": "Returns the enabled status of an extension.",
        "description": "",
        "operationId": "isExtensionEnabled",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "extensionName",
            "in": "path",
            "description": "The name of the extension to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/extensions/{extensionName}/properties": {
      "get": {
        "tags": ["Extensions"],
        "summary": "Returns properties for a specified extension.",
        "description": "",
        "operationId": "getPluginProperties",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "extensionName",
            "in": "path",
            "description": "The name of the extension to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Extensions"],
        "summary": "Sets properties for a specified extension.",
        "description": "",
        "operationId": "setPluginProperties",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "extensionName",
            "in": "path",
            "description": "The name of the extension to retrieve.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The new properties to set.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/server/_generateGUID": {
      "post": {
        "tags": ["Server Configuration"],
        "summary": "Returns a globally unique id.",
        "description": "",
        "operationId": "getGuid",
        "consumes": ["application/xml"],
        "produces": ["text/plain"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/server/_testEmail": {
      "post": {
        "tags": ["Server Configuration"],
        "summary": "Sends a test e-mail.",
        "description": "",
        "operationId": "sendTestEmail",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Contains all properties needed to send the e-mail. Properties include: port, encryption, host, timeout, authentication, username, password, toAddress, fromAddress",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConnectionTestResponse"
            }
          }
        }
      }
    },
    "/server/about": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns a map of common information about the Mirth Connect server.",
        "description": "",
        "operationId": "getAbout",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/server/buildDate": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns the build date of the Mirth Connect server.",
        "description": "",
        "operationId": "getBuildDate",
        "consumes": ["application/xml"],
        "produces": ["text/plain"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/server/channelDependencies": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns all channel dependencies for the server.",
        "description": "",
        "operationId": "getChannelDependencies",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/ChannelDependency"
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Server Configuration"],
        "summary": "Updates all channel dependencies for the server.",
        "description": "",
        "operationId": "setChannelDependencies",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The channel dependencies to set.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelDependency"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/server/channelMetadata": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns all channel metadata for the server.",
        "description": "",
        "operationId": "getChannelMetadata",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ChannelMetadata"
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Server Configuration"],
        "summary": "Updates all channel metadata for the server.",
        "description": "",
        "operationId": "setChannelMetadata",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The map of channel metadata to set.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ChannelMetadata"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/server/channelTags": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns a set containing all channel tags for the server.",
        "description": "",
        "operationId": "getChannelTags",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/ChannelTag"
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Server Configuration"],
        "summary": "Updates all channel tags.",
        "description": "",
        "operationId": "setChannelTags",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The channel tags to set.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelTag"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/server/charsets": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns a List of all of the charset encodings supported by the server.",
        "description": "",
        "operationId": "getAvailableCharsetEncodings",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/server/configuration": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns a ServerConfiguration object which contains all of the channels, alerts, configuration map, and properties stored on the Mirth Connect server.",
        "description": "",
        "operationId": "getServerConfiguration",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "initialState",
            "in": "query",
            "description": "The initial state to set all channels in the configuration to.",
            "required": false,
            "type": "string",
            "enum": ["STARTED", "PAUSED", "STOPPED"]
          }, {
            "name": "pollingOnly",
            "in": "query",
            "description": "If true, and the initialState parameter is set, only channels with polling source connectors will have their initial states overwritten in the returned server configuration.",
            "required": false,
            "type": "boolean"
          }, {
            "name": "disableAlerts",
            "in": "query",
            "description": "If true, all alerts returned in the server configuration will be disabled.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServerConfiguration"
            }
          }
        }
      },
      "put": {
        "tags": ["Server Configuration"],
        "summary": "Updates all of the channels, alerts and properties stored on the Mirth Connect server.",
        "description": "",
        "operationId": "setServerConfiguration",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ServerConfiguration object containing all channels, users, alerts, and properties to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServerConfiguration"
            }
          }, {
            "name": "deploy",
            "in": "query",
            "description": "If true, all enabled channels will be deployed after the configuration is restored.",
            "required": false,
            "type": "boolean",
            "default": false
          }, {
            "name": "overwriteConfigMap",
            "in": "query",
            "description": "If true, overwrite the Configuration Map",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/server/configurationMap": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns all entries in the configuration map.",
        "description": "",
        "operationId": "getConfigurationMap",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ConfigurationProperty"
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Server Configuration"],
        "summary": "Updates all entries in the configuration map.",
        "description": "",
        "operationId": "setConfigurationMap",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The new configuration map to update with.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ConfigurationProperty"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/server/databaseDrivers": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns the database driver list.",
        "description": "",
        "operationId": "getDatabaseDrivers",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DriverInfo"
              }
            }
          }
        }
      }
    },
    "/server/encryption": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns an EncryptionSettings object with all encryption settings.",
        "description": "",
        "operationId": "getEncryptionSettings",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EncryptionSettings"
            }
          }
        }
      }
    },
    "/server/globalScripts": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns a map containing all of the global scripts.",
        "description": "",
        "operationId": "getGlobalScripts",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Server Configuration"],
        "summary": "Updates all of the global scripts.",
        "description": "",
        "operationId": "setGlobalScripts",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The map of global scripts to update with. Script keys: Deploy, Undeploy, Preprocessor, Postprocessor",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/server/id": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns the server id.",
        "description": "",
        "operationId": "getServerId",
        "consumes": ["application/xml"],
        "produces": ["text/plain"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/server/jvm": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns the name of the JVM running Mirth Connect.",
        "description": "",
        "operationId": "getJVMName",
        "consumes": ["application/xml"],
        "produces": ["text/plain"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/server/licenseInfo": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns a LicenseInfo object with the expiration date and other information.",
        "description": "",
        "operationId": "getLicenseInfo",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LicenseInfo"
            }
          }
        }
      }
    },
    "/server/passwordRequirements": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns all password requirements for the server.",
        "description": "",
        "operationId": "getPasswordRequirements",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PasswordRequirements"
            }
          }
        }
      }
    },
    "/server/protocolsAndCipherSuites": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns a map containing all supported and enabled TLS protocols and cipher suites.",
        "description": "",
        "operationId": "getProtocolsAndCipherSuites",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/server/resources": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns all resources for the server.",
        "description": "",
        "operationId": "getResources",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceProperties"
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Server Configuration"],
        "summary": "Updates all resources for the server.",
        "description": "",
        "operationId": "setResources",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The new list of resource properties to update with.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceProperties"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/server/resources/{resourceId}/_reload": {
      "post": {
        "tags": ["Server Configuration"],
        "summary": "Reloads a resource and all libraries associated with it.",
        "description": "",
        "operationId": "reloadResource",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "description": "The unique ID of the resource to reload.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/server/rhinoLanguageVersion": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns the language version that the Rhino engine should use.",
        "description": "",
        "operationId": "getRhinoLanguageVersion",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      }
    },
    "/server/settings": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns a ServerSettings object with all server settings.",
        "description": "",
        "operationId": "getServerSettings",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ServerSettings"
            }
          }
        }
      },
      "put": {
        "tags": ["Server Configuration"],
        "summary": "Updates the server configuration settings.",
        "description": "",
        "operationId": "setServerSettings",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The ServerSettings object containing all of the settings to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServerSettings"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/server/status": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns the status of the Mirth Connect server.",
        "description": "",
        "operationId": "getStatus",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      }
    },
    "/server/time": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns the time of the server.",
        "description": "",
        "operationId": "getServerTime",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      }
    },
    "/server/timezone": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns the time zone of the server.",
        "description": "",
        "operationId": "getServerTimezone",
        "consumes": ["application/xml"],
        "produces": ["text/plain"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/server/updateSettings": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns an UpdateSettings object with all update settings.",
        "description": "",
        "operationId": "getUpdateSettings",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UpdateSettings"
            }
          }
        }
      },
      "put": {
        "tags": ["Server Configuration"],
        "summary": "Updates the update settings.",
        "description": "",
        "operationId": "setUpdateSettings",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The UpdateSettings object containing all of the settings to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSettings"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/server/version": {
      "get": {
        "tags": ["Server Configuration"],
        "summary": "Returns the version of the Mirth Connect server.",
        "description": "",
        "operationId": "getVersion",
        "consumes": ["application/xml"],
        "produces": ["text/plain"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/system/info": {
      "get": {
        "tags": ["System Information and Statistics"],
        "summary": "Returns information about the underlying system.",
        "description": "",
        "operationId": "getInfo",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SystemInfo"
            }
          }
        }
      }
    },
    "/system/stats": {
      "get": {
        "tags": ["System Information and Statistics"],
        "summary": "Returns statistics for the underlying system.",
        "description": "",
        "operationId": "getStats",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SystemStats"
            }
          }
        }
      }
    },
    "/usageData/_generate": {
      "post": {
        "tags": ["Usage Data"],
        "summary": "Generates usage document using data from both the client and server.",
        "description": "",
        "operationId": "getUsageData",
        "consumes": ["application/xml"],
        "produces": ["text/plain"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The map of client usage data to use.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Returns a List of all users.",
        "description": "",
        "operationId": "getAllUsers",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Users"],
        "summary": "Creates a new user.",
        "description": "",
        "operationId": "createUser",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The User object to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/users/_checkPassword": {
      "post": {
        "tags": ["Users"],
        "summary": "Checks the password against the configured password policies.",
        "description": "",
        "operationId": "checkUserPassword",
        "consumes": ["text/plain"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The plaintext password to check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/users/_login": {
      "post": {
        "tags": ["Users"],
        "summary": "Logs in to the Mirth Connect server using the specified name and password.",
        "description": "",
        "operationId": "login",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "username",
            "in": "formData",
            "description": "The username to login with.",
            "required": true,
            "type": "string",
            "default": "admin"
          }, {
            "name": "password",
            "in": "formData",
            "description": "The password to login with.",
            "required": true,
            "type": "string",
            "default": "admin"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LoginStatus"
            }
          }
        }
      }
    },
    "/users/_logout": {
      "post": {
        "tags": ["Users"],
        "summary": "Logs out of the server.",
        "description": "",
        "operationId": "logout",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["Users"],
        "summary": "Returns the current logged in user.",
        "description": "",
        "operationId": "getCurrentUser",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/users/{userIdOrName}": {
      "get": {
        "tags": ["Users"],
        "summary": "Returns a specific user by ID or username.",
        "description": "",
        "operationId": "getUser",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "userIdOrName",
            "in": "path",
            "description": "The unique ID or username of the user to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "put": {
        "tags": ["Users"],
        "summary": "Updates a specified user.",
        "description": "",
        "operationId": "updateUser",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique ID of the user to update.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }, {
            "in": "body",
            "name": "body",
            "description": "The User object to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Removes a specific user.",
        "description": "",
        "operationId": "removeUser",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique ID of the user to remove.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/users/{userId}/loggedIn": {
      "get": {
        "tags": ["Users"],
        "summary": "Returns a true if the specified user is logged in to the server.",
        "description": "",
        "operationId": "isUserLoggedIn",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique ID of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/users/{userId}/password": {
      "put": {
        "tags": ["Users"],
        "summary": "Updates a user's password.",
        "description": "",
        "operationId": "updateUserPassword",
        "consumes": ["text/plain"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique ID of the user to update the password for.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }, {
            "in": "body",
            "name": "body",
            "description": "The plaintext password to update with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/users/{userId}/preferences": {
      "get": {
        "tags": ["Users"],
        "summary": "Returns a Map of user preferences, optionally filtered by a set of property names.",
        "description": "",
        "operationId": "getUserPreferences",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique ID of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "name",
            "in": "query",
            "description": "An optional set of property names to filter by.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Updates multiple user preferences.",
        "description": "",
        "operationId": "setUserPreferences",
        "consumes": ["application/xml"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique ID of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }, {
            "in": "body",
            "name": "body",
            "description": "The properties to update for the user.",
            "required": true,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/users/{userId}/preferences/{name}": {
      "get": {
        "tags": ["Users"],
        "summary": "Returns a specific user preference.",
        "description": "",
        "operationId": "getUserPreference",
        "consumes": ["application/xml"],
        "produces": ["text/plain"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique ID of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "name",
            "in": "path",
            "description": "The name of the user property to retrieve.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Updates a user preference.",
        "description": "",
        "operationId": "setUserPreference",
        "consumes": ["text/plain"],
        "produces": ["application/xml"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique ID of the user.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "name",
            "in": "path",
            "description": "The name of the user property to update.",
            "required": true,
            "type": "string"
          }, {
            "in": "body",
            "name": "body",
            "description": "The value to update the property with.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    }
  },
  "definitions": {
    "ConfigurationProperty": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "DefinitionServiceMap": {
      "type": "object",
      "properties": {
        "map": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DefinitionPortMap"
          }
        }
      }
    },
    "ConnectorMetaData": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "author": {
          "type": "string"
        },
        "mirthVersion": {
          "type": "string"
        },
        "pluginVersion": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "apiProviders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiProvider"
          }
        },
        "libraries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionLibrary"
          }
        },
        "templateClassName": {
          "type": "string"
        },
        "userutilPackages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "notify": {
          "type": "boolean",
          "default": false
        },
        "serverClassName": {
          "type": "string"
        },
        "sharedClassName": {
          "type": "string"
        },
        "clientClassName": {
          "type": "string"
        },
        "transformers": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["SOURCE", "DESTINATION"]
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "AttachmentHandlerProperties": {
      "type": "object",
      "properties": {
        "className": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ResponseValidationProperties": {
      "type": "object",
      "properties": {
        "propertyDescriptors": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DataTypePropertyDescriptor"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "AlertModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "trigger": {
          "$ref": "#/definitions/AlertTrigger"
        },
        "actionGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertActionGroup"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "TransmissionModeProperties": {
      "type": "object",
      "properties": {
        "pluginPointName": {
          "type": "string"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ChannelTag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "channelIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "backgroundColor": {
          "$ref": "#/definitions/Color"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "DeserializationProperties": {
      "type": "object",
      "properties": {
        "serializationType": {
          "type": "string",
          "enum": ["RAW", "XML", "JSON"]
        },
        "propertyDescriptors": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DataTypePropertyDescriptor"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ConnectorPluginProperties": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "DefinitionPortMap": {
      "type": "object",
      "properties": {
        "map": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PortInformation"
          }
        }
      }
    },
    "PollConnectorPropertiesAdvanced": {
      "type": "object",
      "properties": {
        "weekly": {
          "type": "boolean",
          "default": false
        },
        "inactiveDays": {
          "type": "array",
          "items": {
            "type": "boolean"
          }
        },
        "dayOfMonth": {
          "type": "integer",
          "format": "int32"
        },
        "allDay": {
          "type": "boolean",
          "default": false
        },
        "startingHour": {
          "type": "integer",
          "format": "int32"
        },
        "startingMinute": {
          "type": "integer",
          "format": "int32"
        },
        "endingHour": {
          "type": "integer",
          "format": "int32"
        },
        "endingMinute": {
          "type": "integer",
          "format": "int32"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "CodeTemplateLibrary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "revision": {
          "type": "integer",
          "format": "int32"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "includeNewChannels": {
          "type": "boolean",
          "default": false
        },
        "enabledChannelIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "disabledChannelIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "codeTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeTemplate"
          }
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "DriverInfo": {
      "type": "object",
      "properties": {
        "className": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "template": {
          "type": "string"
        },
        "selectLimit": {
          "type": "string"
        }
      }
    },
    "MetaDataSearchElement": {
      "type": "object",
      "properties": {
        "columnName": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "value": {
          "type": "object"
        },
        "ignoreCase": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ServerEvent": {
      "type": "object",
      "properties": {
        "dateTime": {
          "type": "integer",
          "format": "int64"
        },
        "nanoTime": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "eventTime": {
          "type": "string",
          "format": "date-time"
        },
        "level": {
          "type": "string",
          "enum": ["INFORMATION", "WARNING", "ERROR"]
        },
        "name": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "outcome": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE"]
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "ipAddress": {
          "type": "string"
        },
        "serverId": {
          "type": "string"
        }
      }
    },
    "Rule": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "sequenceNumber": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "operator": {
          "type": "string",
          "enum": ["AND", "OR", "NONE"]
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "responseVariables": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "MessageFilter": {
      "type": "object",
      "properties": {
        "maxMessageId": {
          "type": "integer",
          "format": "int64"
        },
        "minMessageId": {
          "type": "integer",
          "format": "int64"
        },
        "originalIdUpper": {
          "type": "integer",
          "format": "int64"
        },
        "originalIdLower": {
          "type": "integer",
          "format": "int64"
        },
        "importIdUpper": {
          "type": "integer",
          "format": "int64"
        },
        "importIdLower": {
          "type": "integer",
          "format": "int64"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "textSearch": {
          "type": "string"
        },
        "textSearchRegex": {
          "type": "boolean",
          "default": false
        },
        "statuses": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": ["RECEIVED", "FILTERED", "TRANSFORMED", "SENT", "QUEUED", "ERROR", "PENDING"]
          }
        },
        "includedMetaDataIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "excludedMetaDataIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "serverId": {
          "type": "string"
        },
        "contentSearch": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContentSearchElement"
          }
        },
        "metaDataSearch": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataSearchElement"
          }
        },
        "textSearchMetaDataColumns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sendAttemptsLower": {
          "type": "integer",
          "format": "int32"
        },
        "sendAttemptsUpper": {
          "type": "integer",
          "format": "int32"
        },
        "attachment": {
          "type": "boolean",
          "default": false
        },
        "error": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ErrorContent": {
      "type": "object",
      "properties": {
        "encrypted": {
          "type": "boolean",
          "default": false
        },
        "content": {
          "type": "string"
        },
        "persisted": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "LicenseInfo": {
      "type": "object",
      "properties": {
        "expirationDate": {
          "type": "integer",
          "format": "int64"
        },
        "warningPeriod": {
          "type": "integer",
          "format": "int64"
        },
        "gracePeriod": {
          "type": "integer",
          "format": "int64"
        },
        "extensions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CodeTemplateFunctionDefinition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Parameter"
          }
        },
        "returnType": {
          "type": "string"
        },
        "returnDescription": {
          "type": "string"
        },
        "transferData": {
          "type": "string"
        }
      }
    },
    "MetaDataColumn": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["STRING", "NUMBER", "BOOLEAN", "TIMESTAMP"]
        },
        "mappingName": {
          "type": "string"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "TcpDispatcherProperties": {
      "type": "object",
      "properties": {
        "pluginProperties": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ConnectorPluginProperties"
          }
        },
        "destinationConnectorProperties": {
          "$ref": "#/definitions/DestinationConnectorProperties"
        },
        "transmissionModeProperties": {
          "$ref": "#/definitions/TransmissionModeProperties"
        },
        "remoteAddress": {
          "type": "string"
        },
        "remotePort": {
          "type": "string"
        },
        "overrideLocalBinding": {
          "type": "boolean",
          "default": false
        },
        "localAddress": {
          "type": "string"
        },
        "localPort": {
          "type": "string"
        },
        "sendTimeout": {
          "type": "string"
        },
        "bufferSize": {
          "type": "string"
        },
        "keepConnectionOpen": {
          "type": "boolean",
          "default": false
        },
        "checkRemoteHost": {
          "type": "boolean",
          "default": false
        },
        "responseTimeout": {
          "type": "string"
        },
        "ignoreResponse": {
          "type": "boolean",
          "default": false
        },
        "queueOnResponseTimeout": {
          "type": "boolean",
          "default": false
        },
        "dataTypeBinary": {
          "type": "boolean",
          "default": false
        },
        "charsetEncoding": {
          "type": "string"
        },
        "template": {
          "type": "string"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "ResponseGenerationProperties": {
      "type": "object",
      "properties": {
        "propertyDescriptors": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DataTypePropertyDescriptor"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "AlertInfo": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/AlertModel"
        },
        "protocolOptions": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "changedChannels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelSummary"
          }
        }
      }
    },
    "StackTraceElement": {
      "type": "object",
      "properties": {
        "methodName": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "lineNumber": {
          "type": "integer",
          "format": "int32"
        },
        "className": {
          "type": "string"
        },
        "nativeMethod": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ApiProvider": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["SERVLET_INTERFACE_PACKAGE", "SERVLET_INTERFACE", "CORE_PACKAGE", "SERVER_PACKAGE", "CORE_CLASS", "SERVER_CLASS"]
        },
        "name": {
          "type": "string"
        },
        "minVersion": {
          "type": "string"
        },
        "maxVersion": {
          "type": "string"
        }
      }
    },
    "FileReceiverProperties": {
      "type": "object",
      "properties": {
        "pluginProperties": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ConnectorPluginProperties"
          }
        },
        "pollConnectorProperties": {
          "$ref": "#/definitions/PollConnectorProperties"
        },
        "sourceConnectorProperties": {
          "$ref": "#/definitions/SourceConnectorProperties"
        },
        "scheme": {
          "type": "string",
          "enum": ["FILE", "FTP", "SFTP", "S3", "SMB", "WEBDAV"]
        },
        "schemeProperties": {
          "$ref": "#/definitions/SchemeProperties"
        },
        "host": {
          "type": "string"
        },
        "fileFilter": {
          "type": "string"
        },
        "regex": {
          "type": "boolean",
          "default": false
        },
        "directoryRecursion": {
          "type": "boolean",
          "default": false
        },
        "ignoreDot": {
          "type": "boolean",
          "default": false
        },
        "anonymous": {
          "type": "boolean",
          "default": false
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "timeout": {
          "type": "string"
        },
        "secure": {
          "type": "boolean",
          "default": false
        },
        "passive": {
          "type": "boolean",
          "default": false
        },
        "validateConnection": {
          "type": "boolean",
          "default": false
        },
        "afterProcessingAction": {
          "type": "string",
          "enum": ["NONE", "MOVE", "DELETE", "AFTER_PROCESSING"]
        },
        "moveToDirectory": {
          "type": "string"
        },
        "moveToFileName": {
          "type": "string"
        },
        "errorReadingAction": {
          "type": "string",
          "enum": ["NONE", "MOVE", "DELETE", "AFTER_PROCESSING"]
        },
        "errorResponseAction": {
          "type": "string",
          "enum": ["NONE", "MOVE", "DELETE", "AFTER_PROCESSING"]
        },
        "errorMoveToDirectory": {
          "type": "string"
        },
        "errorMoveToFileName": {
          "type": "string"
        },
        "checkFileAge": {
          "type": "boolean",
          "default": false
        },
        "fileAge": {
          "type": "string"
        },
        "fileSizeMinimum": {
          "type": "string"
        },
        "fileSizeMaximum": {
          "type": "string"
        },
        "ignoreFileSizeMaximum": {
          "type": "boolean",
          "default": false
        },
        "sortBy": {
          "type": "string"
        },
        "binary": {
          "type": "boolean",
          "default": false
        },
        "charsetEncoding": {
          "type": "string"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "ChannelStatistics": {
      "type": "object",
      "properties": {
        "serverId": {
          "type": "string"
        },
        "channelId": {
          "type": "string"
        },
        "received": {
          "type": "integer",
          "format": "int64"
        },
        "sent": {
          "type": "integer",
          "format": "int64"
        },
        "error": {
          "type": "integer",
          "format": "int64"
        },
        "filtered": {
          "type": "integer",
          "format": "int64"
        },
        "queued": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ServerSettings": {
      "type": "object",
      "properties": {
        "environmentName": {
          "type": "string"
        },
        "serverName": {
          "type": "string"
        },
        "clearGlobalMap": {
          "type": "boolean",
          "default": false
        },
        "queueBufferSize": {
          "type": "integer",
          "format": "int32"
        },
        "defaultMetaDataColumns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataColumn"
          }
        },
        "smtpHost": {
          "type": "string"
        },
        "smtpPort": {
          "type": "string"
        },
        "smtpTimeout": {
          "type": "string"
        },
        "smtpFrom": {
          "type": "string"
        },
        "smtpSecure": {
          "type": "string"
        },
        "smtpAuth": {
          "type": "boolean",
          "default": false
        },
        "smtpUsername": {
          "type": "string"
        },
        "smtpPassword": {
          "type": "string"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LoginStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": ["SUCCESS", "SUCCESS_GRACE_PERIOD", "FAIL", "FAIL_EXPIRED", "FAIL_LOCKED_OUT", "FAIL_VERSION_MISMATCH"]
        },
        "message": {
          "type": "string"
        },
        "updatedUsername": {
          "type": "string"
        }
      }
    },
    "SourceConnectorProperties": {
      "type": "object",
      "properties": {
        "responseVariable": {
          "type": "string"
        },
        "respondAfterProcessing": {
          "type": "boolean",
          "default": false
        },
        "processBatch": {
          "type": "boolean",
          "default": false
        },
        "firstResponse": {
          "type": "boolean",
          "default": false
        },
        "processingThreads": {
          "type": "integer",
          "format": "int32"
        },
        "resourceIds": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "queueBufferSize": {
          "type": "integer",
          "format": "int32"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "AlertActionGroup": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertAction"
          }
        },
        "subject": {
          "type": "string"
        },
        "template": {
          "type": "string"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "Table": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Column"
          }
        }
      }
    },
    "HttpDispatcherProperties": {
      "type": "object",
      "properties": {
        "pluginProperties": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ConnectorPluginProperties"
          }
        },
        "destinationConnectorProperties": {
          "$ref": "#/definitions/DestinationConnectorProperties"
        },
        "host": {
          "type": "string"
        },
        "useProxyServer": {
          "type": "boolean",
          "default": false
        },
        "proxyAddress": {
          "type": "string"
        },
        "proxyPort": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "responseXmlBody": {
          "type": "boolean",
          "default": false
        },
        "responseParseMultipart": {
          "type": "boolean",
          "default": false
        },
        "responseIncludeMetadata": {
          "type": "boolean",
          "default": false
        },
        "responseBinaryMimeTypes": {
          "type": "string"
        },
        "responseBinaryMimeTypesRegex": {
          "type": "boolean",
          "default": false
        },
        "multipart": {
          "type": "boolean",
          "default": false
        },
        "useAuthentication": {
          "type": "boolean",
          "default": false
        },
        "authenticationType": {
          "type": "string"
        },
        "usePreemptiveAuthentication": {
          "type": "boolean",
          "default": false
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "dataTypeBinary": {
          "type": "boolean",
          "default": false
        },
        "charset": {
          "type": "string"
        },
        "socketTimeout": {
          "type": "string"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "ContentSearchElement": {
      "type": "object",
      "properties": {
        "contentCode": {
          "type": "integer",
          "format": "int32"
        },
        "searches": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "WebServiceDispatcherProperties": {
      "type": "object",
      "properties": {
        "pluginProperties": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ConnectorPluginProperties"
          }
        },
        "destinationConnectorProperties": {
          "$ref": "#/definitions/DestinationConnectorProperties"
        },
        "wsdlUrl": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "port": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "locationURI": {
          "type": "string"
        },
        "socketTimeout": {
          "type": "string"
        },
        "useAuthentication": {
          "type": "boolean",
          "default": false
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "envelope": {
          "type": "string"
        },
        "oneWay": {
          "type": "boolean",
          "default": false
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "useMtom": {
          "type": "boolean",
          "default": false
        },
        "attachmentNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "attachmentContents": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "attachmentTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "soapAction": {
          "type": "string"
        },
        "wsdlDefinitionMap": {
          "$ref": "#/definitions/DefinitionServiceMap"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "EventFilter": {
      "type": "object",
      "properties": {
        "maxEventId": {
          "type": "integer",
          "format": "int32"
        },
        "minEventId": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "levels": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": ["INFORMATION", "WARNING", "ERROR"]
          }
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "outcome": {
          "type": "string",
          "enum": ["SUCCESS", "FAILURE"]
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "ipAddress": {
          "type": "string"
        },
        "serverId": {
          "type": "string"
        }
      }
    },
    "ChannelPruningSettings": {
      "type": "object",
      "properties": {
        "pruneMetaDataDays": {
          "type": "integer",
          "format": "int32"
        },
        "pruneContentDays": {
          "type": "integer",
          "format": "int32"
        },
        "archiveEnabled": {
          "type": "boolean",
          "default": false
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "CodeTemplateProperties": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["FUNCTION", "DRAG_AND_DROP_CODE", "COMPILED_CODE"]
        },
        "description": {
          "type": "string"
        },
        "functionDefinition": {
          "$ref": "#/definitions/CodeTemplateFunctionDefinition"
        },
        "code": {
          "type": "string"
        },
        "pluginPointName": {
          "type": "string"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "Parameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "MessageImportResult": {
      "type": "object",
      "properties": {
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "successCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MessageContent": {
      "type": "object",
      "properties": {
        "encrypted": {
          "type": "boolean",
          "default": false
        },
        "channelId": {
          "type": "string"
        },
        "messageId": {
          "type": "integer",
          "format": "int64"
        },
        "metaDataId": {
          "type": "integer",
          "format": "int32"
        },
        "contentType": {
          "type": "string",
          "enum": [
            "RAW", "PROCESSED_RAW", "TRANSFORMED", "ENCODED", "SENT", "RESPONSE", "RESPONSE_TRANSFORMED", "PROCESSED_RESPONSE", "CONNECTOR_MAP", "CHANNEL_MAP", "RESPONSE_MAP", "PROCESSING_ERROR", "POSTPROCESSOR_ERROR", "RESPONSE_ERROR",
            "SOURCE_MAP"
          ]
        },
        "content": {
          "type": "string"
        },
        "dataType": {
          "type": "string"
        }
      }
    },
    "SystemInfo": {
      "type": "object",
      "properties": {
        "jvmVersion": {
          "type": "string"
        },
        "osName": {
          "type": "string"
        },
        "osVersion": {
          "type": "string"
        },
        "osArchitecture": {
          "type": "string"
        },
        "dbName": {
          "type": "string"
        },
        "dbVersion": {
          "type": "string"
        }
      }
    },
    "ChannelExportData": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/ChannelMetadata"
        },
        "codeTemplateLibraries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeTemplateLibrary"
          }
        },
        "dependentIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "dependencyIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "channelTags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelTag"
          }
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ColorSpace": {
      "type": "object",
      "properties": {
        "type": {
          "type": "integer",
          "format": "int32"
        },
        "numComponents": {
          "type": "integer",
          "format": "int32"
        },
        "cs_sRGB": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ExtensionLibrary": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["SERVER", "CLIENT", "SHARED"]
        }
      }
    },
    "ServerConfiguration": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "channelGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelGroup"
          }
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "channelTags": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ChannelTag"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "alerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertModel"
          }
        },
        "codeTemplateLibraries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeTemplateLibrary"
          }
        },
        "serverSettings": {
          "$ref": "#/definitions/ServerSettings"
        },
        "updateSettings": {
          "$ref": "#/definitions/UpdateSettings"
        },
        "globalScripts": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "pluginProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "resourceProperties": {
          "$ref": "#/definitions/ResourcePropertiesList"
        },
        "channelDependencies": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ChannelDependency"
          }
        },
        "configurationMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ConfigurationProperty"
          }
        }
      }
    },
    "PluginMetaData": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "author": {
          "type": "string"
        },
        "mirthVersion": {
          "type": "string"
        },
        "pluginVersion": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "apiProviders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiProvider"
          }
        },
        "libraries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionLibrary"
          }
        },
        "templateClassName": {
          "type": "string"
        },
        "userutilPackages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "notify": {
          "type": "boolean",
          "default": false
        },
        "serverClasses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PluginClass"
          }
        },
        "clientClasses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PluginClass"
          }
        },
        "controllerClasses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PluginClass"
          }
        },
        "migratorClass": {
          "type": "string"
        },
        "sqlScript": {
          "type": "string"
        },
        "sqlMapConfigs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "FileDispatcherProperties": {
      "type": "object",
      "properties": {
        "pluginProperties": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ConnectorPluginProperties"
          }
        },
        "destinationConnectorProperties": {
          "$ref": "#/definitions/DestinationConnectorProperties"
        },
        "scheme": {
          "type": "string",
          "enum": ["FILE", "FTP", "SFTP", "S3", "SMB", "WEBDAV"]
        },
        "schemeProperties": {
          "$ref": "#/definitions/SchemeProperties"
        },
        "host": {
          "type": "string"
        },
        "outputPattern": {
          "type": "string"
        },
        "anonymous": {
          "type": "boolean",
          "default": false
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "timeout": {
          "type": "string"
        },
        "keepConnectionOpen": {
          "type": "boolean",
          "default": false
        },
        "maxIdleTime": {
          "type": "string"
        },
        "secure": {
          "type": "boolean",
          "default": false
        },
        "passive": {
          "type": "boolean",
          "default": false
        },
        "validateConnection": {
          "type": "boolean",
          "default": false
        },
        "outputAppend": {
          "type": "boolean",
          "default": false
        },
        "errorOnExists": {
          "type": "boolean",
          "default": false
        },
        "temporary": {
          "type": "boolean",
          "default": false
        },
        "binary": {
          "type": "boolean",
          "default": false
        },
        "charsetEncoding": {
          "type": "string"
        },
        "template": {
          "type": "string"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "Attachment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "content": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "type": {
          "type": "string"
        },
        "encrypted": {
          "type": "boolean",
          "default": false
        },
        "attachmentId": {
          "type": "string"
        }
      }
    },
    "UpdateSettings": {
      "type": "object",
      "properties": {
        "statsEnabled": {
          "type": "boolean",
          "default": false
        },
        "lastStatsTime": {
          "type": "integer",
          "format": "int64"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ChannelStatus": {
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/Channel"
        },
        "deployedDate": {
          "type": "string",
          "format": "date-time"
        },
        "deployedRevisionDelta": {
          "type": "integer",
          "format": "int32"
        },
        "codeTemplatesChanged": {
          "type": "boolean",
          "default": false
        },
        "localChannelId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ServerLogItem": {
      "type": "object",
      "properties": {
        "serverId": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "level": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "threadName": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "lineNumber": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "throwableInformation": {
          "type": "string"
        }
      }
    },
    "ChannelMetadata": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "pruningSettings": {
          "$ref": "#/definitions/ChannelPruningSettings"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "DashboardStatus": {
      "type": "object",
      "properties": {
        "channelId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": ["UNDEPLOYED", "DEPLOYING", "UNDEPLOYING", "STARTING", "STARTED", "PAUSING", "PAUSED", "STOPPING", "STOPPED", "SYNCING", "UNKNOWN"]
        },
        "deployedRevisionDelta": {
          "type": "integer",
          "format": "int32"
        },
        "deployedDate": {
          "type": "string",
          "format": "date-time"
        },
        "codeTemplatesChanged": {
          "type": "boolean",
          "default": false
        },
        "statistics": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          }
        },
        "lifetimeStatistics": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          }
        },
        "childStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardStatus"
          }
        },
        "metaDataId": {
          "type": "integer",
          "format": "int32"
        },
        "queueEnabled": {
          "type": "boolean",
          "default": false
        },
        "queued": {
          "type": "integer",
          "format": "int64"
        },
        "waitForPrevious": {
          "type": "boolean",
          "default": false
        },
        "statusType": {
          "type": "string",
          "enum": ["CHANNEL", "CHAIN", "SOURCE_CONNECTOR", "DESTINATION_CONNECTOR"]
        },
        "key": {
          "type": "string"
        }
      }
    },
    "MetaData": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "author": {
          "type": "string"
        },
        "mirthVersion": {
          "type": "string"
        },
        "pluginVersion": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "apiProviders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiProvider"
          }
        },
        "libraries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtensionLibrary"
          }
        },
        "templateClassName": {
          "type": "string"
        },
        "userutilPackages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "notify": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "AlertStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "alertedCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CodeTemplateSummary": {
      "type": "object",
      "properties": {
        "codeTemplateId": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean",
          "default": false
        },
        "codeTemplate": {
          "$ref": "#/definitions/CodeTemplate"
        }
      }
    },
    "PortInformation": {
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "locationURI": {
          "type": "string"
        }
      }
    },
    "SerializerProperties": {
      "type": "object",
      "properties": {
        "serializationProperties": {
          "$ref": "#/definitions/SerializationProperties"
        },
        "deserializationProperties": {
          "$ref": "#/definitions/DeserializationProperties"
        },
        "batchProperties": {
          "$ref": "#/definitions/BatchProperties"
        }
      }
    },
    "EncryptionSettings": {
      "type": "object",
      "properties": {
        "encryptExport": {
          "type": "boolean",
          "default": false
        },
        "encryptProperties": {
          "type": "boolean",
          "default": false
        },
        "encryptionAlgorithm": {
          "type": "string"
        },
        "encryptionKeyLength": {
          "type": "integer",
          "format": "int32"
        },
        "digestAlgorithm": {
          "type": "string"
        },
        "securityProvider": {
          "type": "string"
        },
        "secretKey": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "RawMessage": {
      "type": "object",
      "properties": {
        "overwrite": {
          "type": "boolean",
          "default": false
        },
        "imported": {
          "type": "boolean",
          "default": false
        },
        "originalMessageId": {
          "type": "integer",
          "format": "int64"
        },
        "rawData": {
          "type": "string"
        },
        "rawBytes": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "destinationMetaDataIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "sourceMap": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "binary": {
          "type": "boolean",
          "default": false
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        }
      }
    },
    "CronProperty": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "expression": {
          "type": "string"
        }
      }
    },
    "ChannelSummary": {
      "type": "object",
      "properties": {
        "channelId": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean",
          "default": false
        },
        "undeployed": {
          "type": "boolean",
          "default": false
        },
        "channelStatus": {
          "$ref": "#/definitions/ChannelStatus"
        }
      }
    },
    "Channel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "nextMetaDataId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "revision": {
          "type": "integer",
          "format": "int32"
        },
        "sourceConnector": {
          "$ref": "#/definitions/Connector"
        },
        "destinationConnectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Connector"
          }
        },
        "preprocessingScript": {
          "type": "string"
        },
        "postprocessingScript": {
          "type": "string"
        },
        "deployScript": {
          "type": "string"
        },
        "undeployScript": {
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/ChannelProperties"
        },
        "exportData": {
          "$ref": "#/definitions/ChannelExportData"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "enabledDestinationConnectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Connector"
          }
        }
      }
    },
    "Color": {
      "type": "object",
      "properties": {
        "red": {
          "type": "integer",
          "format": "int32"
        },
        "green": {
          "type": "integer",
          "format": "int32"
        },
        "blue": {
          "type": "integer",
          "format": "int32"
        },
        "alpha": {
          "type": "integer",
          "format": "int32"
        },
        "rgb": {
          "type": "integer",
          "format": "int32"
        },
        "colorSpace": {
          "$ref": "#/definitions/ColorSpace"
        },
        "transparency": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AlertAction": {
      "type": "object",
      "properties": {
        "protocol": {
          "type": "string"
        },
        "recipient": {
          "type": "string"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ResourceProperties": {
      "type": "object",
      "properties": {
        "pluginPointName": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "includeWithGlobalScripts": {
          "type": "boolean",
          "default": false
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "DashboardChannelInfo": {
      "type": "object",
      "properties": {
        "dashboardStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardStatus"
          }
        },
        "remainingChannelIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "deployedChannelCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DatabaseTask": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": ["IDLE", "RUNNING"]
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "confirmationMessage": {
          "type": "string"
        },
        "affectedChannels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "DataTypePropertyDescriptor": {
      "type": "object",
      "properties": {
        "value": {
          "type": "object"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "editorType": {
          "type": "string",
          "enum": ["STRING", "BOOLEAN", "JAVASCRIPT", "OPTION"]
        },
        "options": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "SchemeProperties": {
      "type": "object",
      "properties": {
        "fileSchemeProperties": {
          "$ref": "#/definitions/SchemeProperties"
        },
        "summaryText": {
          "type": "string"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "Throwable": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "message": {
          "type": "string"
        },
        "localizedMessage": {
          "type": "string"
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        }
      }
    },
    "CodeTemplateLibrarySaveResult": {
      "type": "object",
      "properties": {
        "overrideNeeded": {
          "type": "boolean",
          "default": false
        },
        "librariesSuccess": {
          "type": "boolean",
          "default": false
        },
        "librariesCause": {
          "$ref": "#/definitions/Throwable"
        },
        "libraryResults": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/LibraryUpdateResult"
          }
        },
        "codeTemplateResults": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CodeTemplateUpdateResult"
          }
        }
      }
    },
    "ResourcePropertiesList": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceProperties"
          }
        }
      }
    },
    "PluginClass": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        },
        "conditionClass": {
          "type": "string"
        }
      }
    },
    "Connector": {
      "type": "object",
      "properties": {
        "metaDataId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/ConnectorProperties"
        },
        "transformer": {
          "$ref": "#/definitions/Transformer"
        },
        "responseTransformer": {
          "$ref": "#/definitions/Transformer"
        },
        "filter": {
          "$ref": "#/definitions/Filter"
        },
        "transportName": {
          "type": "string"
        },
        "mode": {
          "type": "string",
          "enum": ["SOURCE", "DESTINATION"]
        },
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "waitForPrevious": {
          "type": "boolean",
          "default": false
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "AlertTrigger": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "Transformer": {
      "type": "object",
      "properties": {
        "elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Step"
          }
        },
        "inboundTemplate": {
          "type": "string"
        },
        "outboundTemplate": {
          "type": "string"
        },
        "inboundDataType": {
          "type": "string"
        },
        "outboundDataType": {
          "type": "string"
        },
        "inboundProperties": {
          "$ref": "#/definitions/DataTypeProperties"
        },
        "outboundProperties": {
          "$ref": "#/definitions/DataTypeProperties"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "enabledElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Step"
          }
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "industry": {
          "type": "string"
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time"
        },
        "gracePeriodStart": {
          "type": "string",
          "format": "date-time"
        },
        "strikeCount": {
          "type": "integer",
          "format": "int32"
        },
        "lastStrikeTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "messageId": {
          "type": "integer",
          "format": "int64"
        },
        "serverId": {
          "type": "string"
        },
        "channelId": {
          "type": "string"
        },
        "receivedDate": {
          "type": "string",
          "format": "date-time"
        },
        "processed": {
          "type": "boolean",
          "default": false
        },
        "originalId": {
          "type": "integer",
          "format": "int64"
        },
        "importId": {
          "type": "integer",
          "format": "int64"
        },
        "importChannelId": {
          "type": "string"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "connectorMessages": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ConnectorMessage"
          }
        },
        "mergedConnectorMessage": {
          "$ref": "#/definitions/ConnectorMessage"
        }
      }
    },
    "SerializationProperties": {
      "type": "object",
      "properties": {
        "serializationType": {
          "type": "string",
          "enum": ["RAW", "XML", "JSON"]
        },
        "propertyDescriptors": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DataTypePropertyDescriptor"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ChannelDependency": {
      "type": "object",
      "properties": {
        "dependentId": {
          "type": "string"
        },
        "dependencyId": {
          "type": "string"
        }
      }
    },
    "SmtpDispatcherProperties": {
      "type": "object",
      "properties": {
        "pluginProperties": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ConnectorPluginProperties"
          }
        },
        "destinationConnectorProperties": {
          "$ref": "#/definitions/DestinationConnectorProperties"
        },
        "smtpHost": {
          "type": "string"
        },
        "smtpPort": {
          "type": "string"
        },
        "overrideLocalBinding": {
          "type": "boolean",
          "default": false
        },
        "localAddress": {
          "type": "string"
        },
        "localPort": {
          "type": "string"
        },
        "timeout": {
          "type": "string"
        },
        "encryption": {
          "type": "string"
        },
        "authentication": {
          "type": "boolean",
          "default": false
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "cc": {
          "type": "string"
        },
        "bcc": {
          "type": "string"
        },
        "replyTo": {
          "type": "string"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "subject": {
          "type": "string"
        },
        "charsetEncoding": {
          "type": "string"
        },
        "html": {
          "type": "boolean",
          "default": false
        },
        "body": {
          "type": "string"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "CodeTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "revision": {
          "type": "integer",
          "format": "int32"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "contextSet": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "GLOBAL_DEPLOY", "GLOBAL_UNDEPLOY", "GLOBAL_PREPROCESSOR", "GLOBAL_POSTPROCESSOR", "CHANNEL_DEPLOY", "CHANNEL_UNDEPLOY", "CHANNEL_PREPROCESSOR", "CHANNEL_POSTPROCESSOR", "CHANNEL_ATTACHMENT", "CHANNEL_BATCH",
              "SOURCE_RECEIVER", "SOURCE_FILTER_TRANSFORMER", "DESTINATION_FILTER_TRANSFORMER", "DESTINATION_DISPATCHER", "DESTINATION_RESPONSE_TRANSFORMER"
            ]
          }
        },
        "properties": {
          "$ref": "#/definitions/CodeTemplateProperties"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "description": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "addToScripts": {
          "type": "boolean",
          "default": false
        },
        "functionDefinition": {
          "$ref": "#/definitions/CodeTemplateFunctionDefinition"
        },
        "type": {
          "type": "string",
          "enum": ["FUNCTION", "DRAG_AND_DROP_CODE", "COMPILED_CODE"]
        }
      }
    },
    "Step": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "sequenceNumber": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "default": false
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "responseVariables": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "SystemStats": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "cpuUsagePct": {
          "type": "number",
          "format": "double"
        },
        "allocatedMemoryBytes": {
          "type": "integer",
          "format": "int64"
        },
        "freeMemoryBytes": {
          "type": "integer",
          "format": "int64"
        },
        "maxMemoryBytes": {
          "type": "integer",
          "format": "int64"
        },
        "diskFreeBytes": {
          "type": "integer",
          "format": "int64"
        },
        "diskTotalBytes": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ChannelProperties": {
      "type": "object",
      "properties": {
        "clearGlobalChannelMap": {
          "type": "boolean",
          "default": false
        },
        "messageStorageMode": {
          "type": "string",
          "enum": ["DEVELOPMENT", "PRODUCTION", "RAW", "METADATA", "DISABLED"]
        },
        "encryptData": {
          "type": "boolean",
          "default": false
        },
        "removeContentOnCompletion": {
          "type": "boolean",
          "default": false
        },
        "removeOnlyFilteredOnCompletion": {
          "type": "boolean",
          "default": false
        },
        "removeAttachmentsOnCompletion": {
          "type": "boolean",
          "default": false
        },
        "initialState": {
          "type": "string",
          "enum": ["UNDEPLOYED", "DEPLOYING", "UNDEPLOYING", "STARTING", "STARTED", "PAUSING", "PAUSED", "STOPPING", "STOPPED", "SYNCING", "UNKNOWN"]
        },
        "storeAttachments": {
          "type": "boolean",
          "default": false
        },
        "metaDataColumns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetaDataColumn"
          }
        },
        "attachmentProperties": {
          "$ref": "#/definitions/AttachmentHandlerProperties"
        },
        "resourceIds": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "Column": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "precision": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ConnectorMessage": {
      "type": "object",
      "properties": {
        "messageId": {
          "type": "integer",
          "format": "int64"
        },
        "metaDataId": {
          "type": "integer",
          "format": "int32"
        },
        "channelId": {
          "type": "string"
        },
        "channelName": {
          "type": "string"
        },
        "connectorName": {
          "type": "string"
        },
        "serverId": {
          "type": "string"
        },
        "receivedDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "enum": ["RECEIVED", "FILTERED", "TRANSFORMED", "SENT", "QUEUED", "ERROR", "PENDING"]
        },
        "raw": {
          "$ref": "#/definitions/MessageContent"
        },
        "processedRaw": {
          "$ref": "#/definitions/MessageContent"
        },
        "transformed": {
          "$ref": "#/definitions/MessageContent"
        },
        "encoded": {
          "$ref": "#/definitions/MessageContent"
        },
        "sent": {
          "$ref": "#/definitions/MessageContent"
        },
        "response": {
          "$ref": "#/definitions/MessageContent"
        },
        "responseTransformed": {
          "$ref": "#/definitions/MessageContent"
        },
        "processedResponse": {
          "$ref": "#/definitions/MessageContent"
        },
        "sourceMapContent": {
          "$ref": "#/definitions/MapContent"
        },
        "connectorMapContent": {
          "$ref": "#/definitions/MapContent"
        },
        "channelMapContent": {
          "$ref": "#/definitions/MapContent"
        },
        "responseMapContent": {
          "$ref": "#/definitions/MapContent"
        },
        "metaDataMap": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "processingErrorContent": {
          "$ref": "#/definitions/ErrorContent"
        },
        "postProcessorErrorContent": {
          "$ref": "#/definitions/ErrorContent"
        },
        "responseErrorContent": {
          "$ref": "#/definitions/ErrorContent"
        },
        "errorCode": {
          "type": "integer",
          "format": "int32"
        },
        "sendAttempts": {
          "type": "integer",
          "format": "int32"
        },
        "sendDate": {
          "type": "string",
          "format": "date-time"
        },
        "responseDate": {
          "type": "string",
          "format": "date-time"
        },
        "chainId": {
          "type": "integer",
          "format": "int32"
        },
        "orderId": {
          "type": "integer",
          "format": "int32"
        },
        "sentProperties": {
          "$ref": "#/definitions/ConnectorProperties"
        },
        "queueBucket": {
          "type": "integer",
          "format": "int32"
        },
        "attemptedFirst": {
          "type": "boolean",
          "default": false
        },
        "dispatcherId": {
          "type": "integer",
          "format": "int64"
        },
        "responseError": {
          "type": "string"
        },
        "sourceMap": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "responseMap": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "connectorMap": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "channelMap": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "processingError": {
          "type": "string"
        },
        "postProcessorError": {
          "type": "string"
        }
      }
    },
    "BatchProperties": {
      "type": "object",
      "properties": {
        "propertyDescriptors": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DataTypePropertyDescriptor"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "CodeTemplateUpdateResult": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "default": false
        },
        "newRevision": {
          "type": "integer",
          "format": "int32"
        },
        "newLastModified": {
          "type": "string",
          "format": "date-time"
        },
        "cause": {
          "$ref": "#/definitions/Throwable"
        }
      }
    },
    "JmsConnectorProperties": {
      "type": "object",
      "properties": {
        "pluginProperties": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ConnectorPluginProperties"
          }
        },
        "useJndi": {
          "type": "boolean",
          "default": false
        },
        "jndiProviderUrl": {
          "type": "string"
        },
        "jndiInitialContextFactory": {
          "type": "string"
        },
        "jndiConnectionFactoryName": {
          "type": "string"
        },
        "connectionFactoryClass": {
          "type": "string"
        },
        "connectionProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "destinationName": {
          "type": "string"
        },
        "topic": {
          "type": "boolean",
          "default": false
        },
        "clientId": {
          "type": "string"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "MapContent": {
      "type": "object",
      "properties": {
        "encrypted": {
          "type": "boolean",
          "default": false
        },
        "content": {
          "type": "object"
        },
        "persisted": {
          "type": "boolean",
          "default": false
        },
        "map": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ConnectionTestResponse": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["SUCCESS", "TIME_OUT", "FAILURE"]
        },
        "message": {
          "type": "string"
        },
        "connectionInfo": {
          "type": "string"
        }
      }
    },
    "DataTypeProperties": {
      "type": "object",
      "properties": {
        "serializationProperties": {
          "$ref": "#/definitions/SerializationProperties"
        },
        "deserializationProperties": {
          "$ref": "#/definitions/DeserializationProperties"
        },
        "batchProperties": {
          "$ref": "#/definitions/BatchProperties"
        },
        "responseGenerationProperties": {
          "$ref": "#/definitions/ResponseGenerationProperties"
        },
        "responseValidationProperties": {
          "$ref": "#/definitions/ResponseValidationProperties"
        },
        "serializerProperties": {
          "$ref": "#/definitions/SerializerProperties"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "PasswordRequirements": {
      "type": "object",
      "properties": {
        "minLength": {
          "type": "integer",
          "format": "int32"
        },
        "minUpper": {
          "type": "integer",
          "format": "int32"
        },
        "minLower": {
          "type": "integer",
          "format": "int32"
        },
        "minNumeric": {
          "type": "integer",
          "format": "int32"
        },
        "minSpecial": {
          "type": "integer",
          "format": "int32"
        },
        "retryLimit": {
          "type": "integer",
          "format": "int32"
        },
        "lockoutPeriod": {
          "type": "integer",
          "format": "int32"
        },
        "expiration": {
          "type": "integer",
          "format": "int32"
        },
        "gracePeriod": {
          "type": "integer",
          "format": "int32"
        },
        "reusePeriod": {
          "type": "integer",
          "format": "int32"
        },
        "reuseLimit": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ConnectionLogItem": {
      "type": "object",
      "properties": {
        "logId": {
          "type": "integer",
          "format": "int64"
        },
        "serverId": {
          "type": "string"
        },
        "channelId": {
          "type": "string"
        },
        "metadataId": {
          "type": "integer",
          "format": "int64"
        },
        "dateAdded": {
          "type": "string"
        },
        "channelName": {
          "type": "string"
        },
        "connectorType": {
          "type": "string"
        },
        "eventState": {
          "type": "string"
        },
        "information": {
          "type": "string"
        }
      }
    },
    "LibraryUpdateResult": {
      "type": "object",
      "properties": {
        "newRevision": {
          "type": "integer",
          "format": "int32"
        },
        "newLastModified": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ConnectorProperties": {
      "type": "object",
      "properties": {
        "pluginProperties": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ConnectorPluginProperties"
          }
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "Filter": {
      "type": "object",
      "properties": {
        "elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Rule"
          }
        },
        "enabledElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Rule"
          }
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ChannelHeader": {
      "type": "object",
      "properties": {
        "revision": {
          "type": "integer",
          "format": "int32"
        },
        "deployedDate": {
          "type": "string",
          "format": "date-time"
        },
        "codeTemplatesChanged": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "DestinationConnectorProperties": {
      "type": "object",
      "properties": {
        "queueEnabled": {
          "type": "boolean",
          "default": false
        },
        "sendFirst": {
          "type": "boolean",
          "default": false
        },
        "retryIntervalMillis": {
          "type": "integer",
          "format": "int32"
        },
        "regenerateTemplate": {
          "type": "boolean",
          "default": false
        },
        "retryCount": {
          "type": "integer",
          "format": "int32"
        },
        "rotate": {
          "type": "boolean",
          "default": false
        },
        "includeFilterTransformer": {
          "type": "boolean",
          "default": false
        },
        "threadCount": {
          "type": "integer",
          "format": "int32"
        },
        "threadAssignmentVariable": {
          "type": "string"
        },
        "validateResponse": {
          "type": "boolean",
          "default": false
        },
        "resourceIds": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "queueBufferSize": {
          "type": "integer",
          "format": "int32"
        },
        "reattachAttachments": {
          "type": "boolean",
          "default": false
        },
        "pluginProperties": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ConnectorPluginProperties"
          }
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ChannelGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "revision": {
          "type": "integer",
          "format": "int32"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          }
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "PollConnectorProperties": {
      "type": "object",
      "properties": {
        "pollingType": {
          "type": "string",
          "enum": ["INTERVAL", "TIME", "CRON"]
        },
        "pollOnStart": {
          "type": "boolean",
          "default": false
        },
        "pollingFrequency": {
          "type": "integer",
          "format": "int32"
        },
        "pollingHour": {
          "type": "integer",
          "format": "int32"
        },
        "pollingMinute": {
          "type": "integer",
          "format": "int32"
        },
        "cronJobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CronProperty"
          }
        },
        "pollConnectorPropertiesAdvanced": {
          "$ref": "#/definitions/PollConnectorPropertiesAdvanced"
        },
        "purgedProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    }
  }
}
